
WCE_NUCLEO_L4_nanosecond_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f78  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a4  080041a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041a4  080041a4  000141a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041ac  080041ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  080041c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080041c0  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2d6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bf7  00000000  00000000  0002f312  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  00030f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e50  00000000  00000000  00031e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002995b  00000000  00000000  00032c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bbab  00000000  00000000  0005c5f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001054c4  00000000  00000000  0006819e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d662  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004068  00000000  00000000  0016d6e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800411c 	.word	0x0800411c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800411c 	.word	0x0800411c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fd14 	bl	8000f2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f941 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 faf9 	bl	8000b00 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800050e:	f000 f9bb 	bl	8000888 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000512:	f000 fa07 	bl	8000924 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000516:	f000 fa51 	bl	80009bc <MX_TIM1_Init>
  MX_TIM2_Init();
 800051a:	f000 faa3 	bl	8000a64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800051e:	4898      	ldr	r0, [pc, #608]	; (8000780 <main+0x284>)
 8000520:	f002 fd48 	bl	8002fb4 <HAL_TIM_Base_Start>
  int timeDiff = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
  int counter = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]

  volatile uint32_t* ODR_B = (volatile uint32_t*) 0x48000014;
 800052c:	4b95      	ldr	r3, [pc, #596]	; (8000784 <main+0x288>)
 800052e:	607b      	str	r3, [r7, #4]
  //enables ART accelarator prefetch to flash
  *((volatile uint32_t*) 0x40022000) |= (0b111<<8);
 8000530:	4b95      	ldr	r3, [pc, #596]	; (8000788 <main+0x28c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a94      	ldr	r2, [pc, #592]	; (8000788 <main+0x28c>)
 8000536:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800053a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /* [0] ---- 10010000 ---- */
	  GPIOA->BSRR =(1<<5);
 800053c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000540:	2220      	movs	r2, #32
 8000542:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000544:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000546:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800054e:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000550:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000552:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000556:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800055a:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 800055c:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 800055e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000562:	2220      	movs	r2, #32
 8000564:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000566:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000568:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800056c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000570:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000572:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000574:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000578:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800057c:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 800057e:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000584:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000588:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 800058a:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 800058c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000590:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000594:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000596:	bf00      	nop
	  /* [1] ---- 11000001 ---- */
	  GPIOA->BSRR =(1<<5);
 8000598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059c:	2220      	movs	r2, #32
 800059e:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80005a0:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 80005a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a6:	2220      	movs	r2, #32
 80005a8:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80005aa:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 80005ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005b4:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80005b6:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 80005b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005c0:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80005c2:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 80005c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005cc:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80005ce:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 80005d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005d8:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80005da:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 80005dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005e4:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80005e6:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 80005e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ec:	2220      	movs	r2, #32
 80005ee:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80005f0:	bf00      	nop
	  /* [2] ---- 00101010 ---- */
	  GPIOA->BSRR =(1<<21);
 80005f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005fa:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80005fc:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 80005fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000602:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000606:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000608:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 800060a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800060e:	2220      	movs	r2, #32
 8000610:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000612:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000618:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800061c:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 800061e:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 8000620:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000624:	2220      	movs	r2, #32
 8000626:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000628:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 800062a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800062e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000632:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000634:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 8000636:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800063a:	2220      	movs	r2, #32
 800063c:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 800063e:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000644:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000648:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 800064a:	bf00      	nop
	  /* [3] ---- 10010010 ---- */
	  GPIOA->BSRR =(1<<5);
 800064c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000650:	2220      	movs	r2, #32
 8000652:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000654:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000656:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800065a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800065e:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000660:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000662:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000666:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800066a:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 800066c:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 800066e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000672:	2220      	movs	r2, #32
 8000674:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000676:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000678:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800067c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000680:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000682:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000684:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000688:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800068c:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 800068e:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 8000690:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000694:	2220      	movs	r2, #32
 8000696:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000698:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 800069a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800069e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006a2:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80006a4:	bf00      	nop
	  /* [4] ---- 00000101 ---- */
	  GPIOA->BSRR =(1<<21);
 80006a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006ae:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80006b0:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 80006b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006ba:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80006bc:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 80006be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006c6:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80006c8:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 80006ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006d2:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80006d4:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 80006d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006de:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80006e0:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 80006e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006e6:	2220      	movs	r2, #32
 80006e8:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80006ea:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 80006ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006f4:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 80006f6:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 80006f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006fc:	2220      	movs	r2, #32
 80006fe:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000700:	bf00      	nop
	  /* [5] ---- 00101000 ---- */
	  GPIOA->BSRR =(1<<21);
 8000702:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000706:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800070a:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 800070c:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 800070e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000712:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000716:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000718:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 800071a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800071e:	2220      	movs	r2, #32
 8000720:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000722:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000728:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800072c:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 800072e:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 8000730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000734:	2220      	movs	r2, #32
 8000736:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000738:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 800073a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800073e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000742:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000744:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000746:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800074a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800074e:	619a      	str	r2, [r3, #24]
	  __ASM volatile ("nop");
 8000750:	bf00      	nop
	  GPIOA->BSRR =(1<<21);
 8000752:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000756:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800075a:	619a      	str	r2, [r3, #24]

	  __ASM volatile ("nop");
 800075c:	bf00      	nop
	  GPIOA->BSRR =(1<<5);
 800075e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000762:	2220      	movs	r2, #32
 8000764:	619a      	str	r2, [r3, #24]

/* ---- 90.5 us delay ---- */
	while(counter <= 345) // T = 179*2 for cyclic check
 8000766:	e003      	b.n	8000770 <main+0x274>
	{
		__ASM volatile ("nop");
 8000768:	bf00      	nop
		counter++;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3301      	adds	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
	while(counter <= 345) // T = 179*2 for cyclic check
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 8000776:	dbf7      	blt.n	8000768 <main+0x26c>
	}
	counter = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
	  GPIOA->BSRR =(1<<5);
 800077c:	e6de      	b.n	800053c <main+0x40>
 800077e:	bf00      	nop
 8000780:	20000140 	.word	0x20000140
 8000784:	48000014 	.word	0x48000014
 8000788:	40022000 	.word	0x40022000

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0bc      	sub	sp, #240	; 0xf0
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000796:	2244      	movs	r2, #68	; 0x44
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fcb6 	bl	800410c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2294      	movs	r2, #148	; 0x94
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fca8 	bl	800410c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c0:	f000 feda 	bl	8001578 <HAL_PWREx_ControlVoltageScaling>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x42>
  {
    Error_Handler();
 80007ca:	f000 fa53 	bl	8000c74 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ce:	2302      	movs	r3, #2
 80007d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2340      	movs	r3, #64	; 0x40
 80007de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 12;
 80007f4:	230c      	movs	r3, #12
 80007f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000810:	4618      	mov	r0, r3
 8000812:	f000 ff65 	bl	80016e0 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 fa2a 	bl	8000c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2303      	movs	r3, #3
 8000828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800083e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000842:	2102      	movs	r1, #2
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fb71 	bl	8001f2c <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000850:	f000 fa10 	bl	8000c74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1;
 8000854:	2324      	movs	r3, #36	; 0x24
 8000856:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800085c:	2300      	movs	r3, #0
 800085e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fe46 	bl	80024f4 <HAL_RCCEx_PeriphCLKConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800086e:	f000 fa01 	bl	8000c74 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_4);
 8000872:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000876:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800087a:	2000      	movs	r0, #0
 800087c:	f001 fc82 	bl	8002184 <HAL_RCC_MCOConfig>
}
 8000880:	bf00      	nop
 8000882:	37f0      	adds	r7, #240	; 0xf0
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	; (800091c <MX_LPUART1_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 8000894:	4a22      	ldr	r2, [pc, #136]	; (8000920 <MX_LPUART1_UART_Init+0x98>)
 8000896:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 800089a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800089e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008d2:	f002 fe4d 	bl	8003570 <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 f9ca 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008e4:	f003 fb09 	bl	8003efa <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 f9c1 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008f6:	f003 fb3e 	bl	8003f76 <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 f9b8 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 8000906:	f003 fabf 	bl	8003e88 <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f9b0 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000b4 	.word	0x200000b4
 800091c:	40008000 	.word	0x40008000
 8000920:	00033324 	.word	0x00033324

08000924 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 800092a:	4a23      	ldr	r2, [pc, #140]	; (80009b8 <MX_USART3_UART_Init+0x94>)
 800092c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096c:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 800096e:	f002 fdff 	bl	8003570 <HAL_UART_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000978:	f000 f97c 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000980:	f003 fabb 	bl	8003efa <HAL_UARTEx_SetTxFifoThreshold>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800098a:	f000 f973 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000992:	f003 faf0 	bl	8003f76 <HAL_UARTEx_SetRxFifoThreshold>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800099c:	f000 f96a 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 80009a2:	f003 fa71 	bl	8003e88 <HAL_UARTEx_DisableFifoMode>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009ac:	f000 f962 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000028 	.word	0x20000028
 80009b8:	40004800 	.word	0x40004800

080009bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <MX_TIM1_Init+0xa4>)
 80009de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_TIM1_Init+0xa0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a06:	4815      	ldr	r0, [pc, #84]	; (8000a5c <MX_TIM1_Init+0xa0>)
 8000a08:	f002 fa7c 	bl	8002f04 <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a12:	f000 f92f 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <MX_TIM1_Init+0xa0>)
 8000a24:	f002 fb2e 	bl	8003084 <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a2e:	f000 f921 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_TIM1_Init+0xa0>)
 8000a44:	f002 fd0c 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a4e:	f000 f911 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3720      	adds	r7, #32
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000140 	.word	0x20000140
 8000a60:	40012c00 	.word	0x40012c00

08000a64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_TIM2_Init+0x98>)
 8000a84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12-1;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_TIM2_Init+0x98>)
 8000a8c:	220b      	movs	r2, #11
 8000a8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_TIM2_Init+0x98>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_TIM2_Init+0x98>)
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_TIM2_Init+0x98>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_TIM2_Init+0x98>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aaa:	4814      	ldr	r0, [pc, #80]	; (8000afc <MX_TIM2_Init+0x98>)
 8000aac:	f002 fa2a 	bl	8002f04 <HAL_TIM_Base_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ab6:	f000 f8dd 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_TIM2_Init+0x98>)
 8000ac8:	f002 fadc 	bl	8003084 <HAL_TIM_ConfigClockSource>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ad2:	f000 f8cf 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <MX_TIM2_Init+0x98>)
 8000ae4:	f002 fcbc 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000aee:	f000 f8c1 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000018c 	.word	0x2000018c

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	; 0x30
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b53      	ldr	r3, [pc, #332]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a52      	ldr	r2, [pc, #328]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2e:	4b4d      	ldr	r3, [pc, #308]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a4c      	ldr	r2, [pc, #304]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a46      	ldr	r2, [pc, #280]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b44      	ldr	r3, [pc, #272]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b41      	ldr	r3, [pc, #260]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a40      	ldr	r2, [pc, #256]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a3a      	ldr	r2, [pc, #232]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8e:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a34      	ldr	r2, [pc, #208]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <MX_GPIO_Init+0x164>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000ba6:	f000 fd8b 	bl	80016c0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2160      	movs	r1, #96	; 0x60
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb2:	f000 fca9 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000bbc:	482a      	ldr	r0, [pc, #168]	; (8000c68 <MX_GPIO_Init+0x168>)
 8000bbe:	f000 fca3 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc8:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <MX_GPIO_Init+0x16c>)
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4826      	ldr	r0, [pc, #152]	; (8000c70 <MX_GPIO_Init+0x170>)
 8000bd8:	f000 fb04 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f000 faf5 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bfa:	2340      	movs	r3, #64	; 0x40
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f000 fae6 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c18:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_GPIO_Init+0x168>)
 8000c32:	f000 fad7 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f000 fac5 	bl	80011e4 <HAL_GPIO_Init>

}
 8000c5a:	bf00      	nop
 8000c5c:	3730      	adds	r7, #48	; 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	48000400 	.word	0x48000400
 8000c6c:	10110000 	.word	0x10110000
 8000c70:	48000800 	.word	0x48000800

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <Error_Handler+0x6>

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_MspInit+0x44>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_MspInit+0x44>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	; 0x30
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a30      	ldr	r2, [pc, #192]	; (8000da4 <HAL_UART_MspInit+0xe0>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d12b      	bne.n	8000d3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ce6:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cea:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000d16:	f000 fcd3 	bl	80016c0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d1a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	481d      	ldr	r0, [pc, #116]	; (8000dac <HAL_UART_MspInit+0xe8>)
 8000d38:	f000 fa54 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3c:	e02d      	b.n	8000d9a <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <HAL_UART_MspInit+0xec>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d128      	bne.n	8000d9a <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4c:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d52:	6593      	str	r3, [r2, #88]	; 0x58
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_UART_MspInit+0xe4>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <HAL_UART_MspInit+0xf0>)
 8000d96:	f000 fa25 	bl	80011e4 <HAL_GPIO_Init>
}
 8000d9a:	bf00      	nop
 8000d9c:	3730      	adds	r7, #48	; 0x30
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40008000 	.word	0x40008000
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48001800 	.word	0x48001800
 8000db0:	40004800 	.word	0x40004800
 8000db4:	48000c00 	.word	0x48000c00

08000db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <HAL_TIM_Base_MspInit+0x5c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10c      	bne.n	8000de4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <HAL_TIM_Base_MspInit+0x60>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <HAL_TIM_Base_MspInit+0x60>)
 8000dd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_TIM_Base_MspInit+0x60>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000de2:	e010      	b.n	8000e06 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dec:	d10b      	bne.n	8000e06 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_TIM_Base_MspInit+0x60>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <HAL_TIM_Base_MspInit+0x60>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <HAL_TIM_Base_MspInit+0x60>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40012c00 	.word	0x40012c00
 8000e18:	40021000 	.word	0x40021000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f8b6 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <SystemInit+0x64>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7a:	4a16      	ldr	r2, [pc, #88]	; (8000ed4 <SystemInit+0x64>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <SystemInit+0x68>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <SystemInit+0x68>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <SystemInit+0x68>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <SystemInit+0x68>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <SystemInit+0x68>)
 8000e9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ea0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ea4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <SystemInit+0x68>)
 8000ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <SystemInit+0x68>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <SystemInit+0x68>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <SystemInit+0x68>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SystemInit+0x64>)
 8000ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00
 8000ed8:	40021000 	.word	0x40021000

08000edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee0:	f7ff ffc6 	bl	8000e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ee4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ee6:	e003      	b.n	8000ef0 <LoopCopyDataInit>

08000ee8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000eec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eee:	3104      	adds	r1, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ef0:	480a      	ldr	r0, [pc, #40]	; (8000f1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ef4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ef6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ef8:	d3f6      	bcc.n	8000ee8 <CopyDataInit>
	ldr	r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000efc:	e002      	b.n	8000f04 <LoopFillZerobss>

08000efe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000efe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f00:	f842 3b04 	str.w	r3, [r2], #4

08000f04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <LoopForever+0x16>)
	cmp	r2, r3
 8000f06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f08:	d3f9      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f003 f8db 	bl	80040c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0e:	f7ff faf5 	bl	80004fc <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f14:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000f18:	080041b4 	.word	0x080041b4
	ldr	r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f20:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f24:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f28:	200001dc 	.word	0x200001dc

08000f2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_IRQHandler>

08000f2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f91f 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f80e 	bl	8000f60 <HAL_InitTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	e001      	b.n	8000f54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f50:	f7ff fe94 	bl	8000c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_InitTick+0x6c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d023      	beq.n	8000fbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_InitTick+0x70>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_InitTick+0x6c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f91d 	bl	80011ca <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10f      	bne.n	8000fb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d809      	bhi.n	8000fb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 f8f5 	bl	8001192 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_InitTick+0x74>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e007      	b.n	8000fc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e004      	b.n	8000fc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e001      	b.n	8000fc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	200001d8 	.word	0x200001d8

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	200001d8 	.word	0x200001d8

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff47 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff5c 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffb0 	bl	8001138 <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f2:	e166      	b.n	80014c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2101      	movs	r1, #1
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8158 	beq.w	80014bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d00b      	beq.n	800122c <HAL_GPIO_Init+0x48>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d007      	beq.n	800122c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001220:	2b11      	cmp	r3, #17
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b12      	cmp	r3, #18
 800122a:	d130      	bne.n	800128e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001262:	2201      	movs	r2, #1
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	f003 0201 	and.w	r2, r3, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0xea>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b12      	cmp	r3, #18
 80012cc:	d123      	bne.n	8001316 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	220f      	movs	r2, #15
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	691a      	ldr	r2, [r3, #16]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	6939      	ldr	r1, [r7, #16]
 8001312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0203 	and.w	r2, r3, #3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80b2 	beq.w	80014bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001358:	4b61      	ldr	r3, [pc, #388]	; (80014e0 <HAL_GPIO_Init+0x2fc>)
 800135a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135c:	4a60      	ldr	r2, [pc, #384]	; (80014e0 <HAL_GPIO_Init+0x2fc>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6613      	str	r3, [r2, #96]	; 0x60
 8001364:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <HAL_GPIO_Init+0x2fc>)
 8001366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001370:	4a5c      	ldr	r2, [pc, #368]	; (80014e4 <HAL_GPIO_Init+0x300>)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800139a:	d02b      	beq.n	80013f4 <HAL_GPIO_Init+0x210>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a52      	ldr	r2, [pc, #328]	; (80014e8 <HAL_GPIO_Init+0x304>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d025      	beq.n	80013f0 <HAL_GPIO_Init+0x20c>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a51      	ldr	r2, [pc, #324]	; (80014ec <HAL_GPIO_Init+0x308>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d01f      	beq.n	80013ec <HAL_GPIO_Init+0x208>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a50      	ldr	r2, [pc, #320]	; (80014f0 <HAL_GPIO_Init+0x30c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d019      	beq.n	80013e8 <HAL_GPIO_Init+0x204>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <HAL_GPIO_Init+0x310>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d013      	beq.n	80013e4 <HAL_GPIO_Init+0x200>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a4e      	ldr	r2, [pc, #312]	; (80014f8 <HAL_GPIO_Init+0x314>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d00d      	beq.n	80013e0 <HAL_GPIO_Init+0x1fc>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <HAL_GPIO_Init+0x318>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d007      	beq.n	80013dc <HAL_GPIO_Init+0x1f8>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a4c      	ldr	r2, [pc, #304]	; (8001500 <HAL_GPIO_Init+0x31c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d101      	bne.n	80013d8 <HAL_GPIO_Init+0x1f4>
 80013d4:	2307      	movs	r3, #7
 80013d6:	e00e      	b.n	80013f6 <HAL_GPIO_Init+0x212>
 80013d8:	2308      	movs	r3, #8
 80013da:	e00c      	b.n	80013f6 <HAL_GPIO_Init+0x212>
 80013dc:	2306      	movs	r3, #6
 80013de:	e00a      	b.n	80013f6 <HAL_GPIO_Init+0x212>
 80013e0:	2305      	movs	r3, #5
 80013e2:	e008      	b.n	80013f6 <HAL_GPIO_Init+0x212>
 80013e4:	2304      	movs	r3, #4
 80013e6:	e006      	b.n	80013f6 <HAL_GPIO_Init+0x212>
 80013e8:	2303      	movs	r3, #3
 80013ea:	e004      	b.n	80013f6 <HAL_GPIO_Init+0x212>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_Init+0x212>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_GPIO_Init+0x212>
 80013f4:	2300      	movs	r3, #0
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	f002 0203 	and.w	r2, r2, #3
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	4093      	lsls	r3, r2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001406:	4937      	ldr	r1, [pc, #220]	; (80014e4 <HAL_GPIO_Init+0x300>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001414:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_GPIO_Init+0x320>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001438:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_GPIO_Init+0x320>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800143e:	4b31      	ldr	r3, [pc, #196]	; (8001504 <HAL_GPIO_Init+0x320>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001462:	4a28      	ldr	r2, [pc, #160]	; (8001504 <HAL_GPIO_Init+0x320>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001468:	4b26      	ldr	r3, [pc, #152]	; (8001504 <HAL_GPIO_Init+0x320>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800148c:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <HAL_GPIO_Init+0x320>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_GPIO_Init+0x320>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b6:	4a13      	ldr	r2, [pc, #76]	; (8001504 <HAL_GPIO_Init+0x320>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa22 f303 	lsr.w	r3, r2, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f47f ae91 	bne.w	80011f4 <HAL_GPIO_Init+0x10>
  }
}
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	48001000 	.word	0x48001000
 80014f8:	48001400 	.word	0x48001400
 80014fc:	48001800 	.word	0x48001800
 8001500:	48001c00 	.word	0x48001c00
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001524:	e002      	b.n	800152c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_PWREx_GetVoltageRange+0x3c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001548:	d102      	bne.n	8001550 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800154a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154e:	e00b      	b.n	8001568 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800155e:	d102      	bne.n	8001566 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001564:	e000      	b.n	8001568 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001566:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40007000 	.word	0x40007000

08001578 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d141      	bne.n	800160a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001586:	4b4b      	ldr	r3, [pc, #300]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800158e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001592:	d131      	bne.n	80015f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001594:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800159a:	4a46      	ldr	r2, [pc, #280]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a4:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ac:	4a41      	ldr	r2, [pc, #260]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80015b4:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2232      	movs	r2, #50	; 0x32
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4a3f      	ldr	r2, [pc, #252]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	0c9b      	lsrs	r3, r3, #18
 80015c6:	3301      	adds	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ca:	e002      	b.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015de:	d102      	bne.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f2      	bne.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015e6:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f2:	d158      	bne.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e057      	b.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f8:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015fe:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001604:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001608:	e04d      	b.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001610:	d141      	bne.n	8001696 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001612:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800161a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161e:	d131      	bne.n	8001684 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001638:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2232      	movs	r2, #50	; 0x32
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	0c9b      	lsrs	r3, r3, #18
 8001652:	3301      	adds	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001656:	e002      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3b01      	subs	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166a:	d102      	bne.n	8001672 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f2      	bne.n	8001658 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167e:	d112      	bne.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e011      	b.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001694:	e007      	b.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40007000 	.word	0x40007000
 80016b8:	20000000 	.word	0x20000000
 80016bc:	431bde83 	.word	0x431bde83

080016c0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ce:	6053      	str	r3, [r2, #4]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40007000 	.word	0x40007000

080016e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f000 bc16 	b.w	8001f20 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f4:	4ba0      	ldr	r3, [pc, #640]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016fe:	4b9e      	ldr	r3, [pc, #632]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80e4 	beq.w	80018de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d007      	beq.n	800172c <HAL_RCC_OscConfig+0x4c>
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2b0c      	cmp	r3, #12
 8001720:	f040 808b 	bne.w	800183a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b01      	cmp	r3, #1
 8001728:	f040 8087 	bne.w	800183a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800172c:	4b92      	ldr	r3, [pc, #584]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x64>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e3ed      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1a      	ldr	r2, [r3, #32]
 8001748:	4b8b      	ldr	r3, [pc, #556]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <HAL_RCC_OscConfig+0x7e>
 8001754:	4b88      	ldr	r3, [pc, #544]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800175c:	e005      	b.n	800176a <HAL_RCC_OscConfig+0x8a>
 800175e:	4b86      	ldr	r3, [pc, #536]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800176a:	4293      	cmp	r3, r2
 800176c:	d223      	bcs.n	80017b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fdfc 	bl	8002370 <RCC_SetFlashLatencyFromMSIRange>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e3ce      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001782:	4b7d      	ldr	r3, [pc, #500]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a7c      	ldr	r2, [pc, #496]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001788:	f043 0308 	orr.w	r3, r3, #8
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b7a      	ldr	r3, [pc, #488]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4977      	ldr	r1, [pc, #476]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a0:	4b75      	ldr	r3, [pc, #468]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	4972      	ldr	r1, [pc, #456]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
 80017b4:	e025      	b.n	8001802 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b6:	4b70      	ldr	r3, [pc, #448]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6f      	ldr	r2, [pc, #444]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b6d      	ldr	r3, [pc, #436]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	496a      	ldr	r1, [pc, #424]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017d4:	4b68      	ldr	r3, [pc, #416]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	4965      	ldr	r1, [pc, #404]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fdbc 	bl	8002370 <RCC_SetFlashLatencyFromMSIRange>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e38e      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001802:	f000 fcf3 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8001806:	4601      	mov	r1, r0
 8001808:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	4a5a      	ldr	r2, [pc, #360]	; (800197c <HAL_RCC_OscConfig+0x29c>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	fa21 f303 	lsr.w	r3, r1, r3
 800181e:	4a58      	ldr	r2, [pc, #352]	; (8001980 <HAL_RCC_OscConfig+0x2a0>)
 8001820:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001822:	4b58      	ldr	r3, [pc, #352]	; (8001984 <HAL_RCC_OscConfig+0x2a4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fb9a 	bl	8000f60 <HAL_InitTick>
 800182c:	4603      	mov	r3, r0
 800182e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d052      	beq.n	80018dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	e372      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d032      	beq.n	80018a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001842:	4b4d      	ldr	r3, [pc, #308]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800184e:	f7ff fbd7 	bl	8001000 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001856:	f7ff fbd3 	bl	8001000 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e35b      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001868:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001874:	4b40      	ldr	r3, [pc, #256]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a3f      	ldr	r2, [pc, #252]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 800187a:	f043 0308 	orr.w	r3, r3, #8
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	493a      	ldr	r1, [pc, #232]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001892:	4b39      	ldr	r3, [pc, #228]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	4935      	ldr	r1, [pc, #212]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
 80018a6:	e01a      	b.n	80018de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a32      	ldr	r2, [pc, #200]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fba4 	bl	8001000 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018bc:	f7ff fba0 	bl	8001000 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e328      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x1dc>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d073      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_OscConfig+0x21c>
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d10e      	bne.n	8001914 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d10b      	bne.n	8001914 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d063      	beq.n	80019d0 <HAL_RCC_OscConfig+0x2f0>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d15f      	bne.n	80019d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e305      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d106      	bne.n	800192c <HAL_RCC_OscConfig+0x24c>
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a15      	ldr	r2, [pc, #84]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0x288>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x270>
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0x288>
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a05      	ldr	r2, [pc, #20]	; (8001978 <HAL_RCC_OscConfig+0x298>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01b      	beq.n	80019a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fb46 	bl	8001000 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001976:	e010      	b.n	800199a <HAL_RCC_OscConfig+0x2ba>
 8001978:	40021000 	.word	0x40021000
 800197c:	08004144 	.word	0x08004144
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fb3a 	bl	8001000 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e2c2      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199a:	4baf      	ldr	r3, [pc, #700]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x2a8>
 80019a6:	e014      	b.n	80019d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fb2a 	bl	8001000 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff fb26 	bl	8001000 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e2ae      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c2:	4ba5      	ldr	r3, [pc, #660]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2d0>
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d060      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_OscConfig+0x310>
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d119      	bne.n	8001a1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d116      	bne.n	8001a1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f0:	4b99      	ldr	r3, [pc, #612]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_OscConfig+0x328>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e28b      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a08:	4b93      	ldr	r3, [pc, #588]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	4990      	ldr	r1, [pc, #576]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a1c:	e040      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d023      	beq.n	8001a6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a26:	4b8c      	ldr	r3, [pc, #560]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a8b      	ldr	r2, [pc, #556]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff fae5 	bl	8001000 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fae1 	bl	8001000 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e269      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a4c:	4b82      	ldr	r3, [pc, #520]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	497c      	ldr	r1, [pc, #496]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
 8001a6c:	e018      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6e:	4b7a      	ldr	r3, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a79      	ldr	r2, [pc, #484]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fac1 	bl	8001000 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a82:	f7ff fabd 	bl	8001000 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e245      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a94:	4b70      	ldr	r3, [pc, #448]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d03c      	beq.n	8001b26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d01c      	beq.n	8001aee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab4:	4b68      	ldr	r3, [pc, #416]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aba:	4a67      	ldr	r2, [pc, #412]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fa9c 	bl	8001000 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff fa98 	bl	8001000 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e220      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ade:	4b5e      	ldr	r3, [pc, #376]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ef      	beq.n	8001acc <HAL_RCC_OscConfig+0x3ec>
 8001aec:	e01b      	b.n	8001b26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aee:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afe:	f7ff fa7f 	bl	8001000 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b06:	f7ff fa7b 	bl	8001000 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e203      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b18:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ef      	bne.n	8001b06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80a6 	beq.w	8001c80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10d      	bne.n	8001b60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b44:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4a43      	ldr	r2, [pc, #268]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b50:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b60:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <HAL_RCC_OscConfig+0x57c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d118      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_OscConfig+0x57c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a3a      	ldr	r2, [pc, #232]	; (8001c5c <HAL_RCC_OscConfig+0x57c>)
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b78:	f7ff fa42 	bl	8001000 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b80:	f7ff fa3e 	bl	8001000 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e1c6      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b92:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <HAL_RCC_OscConfig+0x57c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x4d8>
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bac:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb6:	e024      	b.n	8001c02 <HAL_RCC_OscConfig+0x522>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d110      	bne.n	8001be2 <HAL_RCC_OscConfig+0x502>
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc6:	4a24      	ldr	r2, [pc, #144]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd6:	4a20      	ldr	r2, [pc, #128]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001be0:	e00f      	b.n	8001c02 <HAL_RCC_OscConfig+0x522>
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf8:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	f023 0304 	bic.w	r3, r3, #4
 8001bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d016      	beq.n	8001c38 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f9f9 	bl	8001000 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff f9f5 	bl	8001000 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e17b      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_OscConfig+0x578>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0ed      	beq.n	8001c12 <HAL_RCC_OscConfig+0x532>
 8001c36:	e01a      	b.n	8001c6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7ff f9e2 	bl	8001000 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c3e:	e00f      	b.n	8001c60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c40:	f7ff f9de 	bl	8001000 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d906      	bls.n	8001c60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e164      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c60:	4ba8      	ldr	r3, [pc, #672]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1e8      	bne.n	8001c40 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c6e:	7ffb      	ldrb	r3, [r7, #31]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d105      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c74:	4ba3      	ldr	r3, [pc, #652]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	4aa2      	ldr	r2, [pc, #648]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d03c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01c      	beq.n	8001cce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c94:	4b9b      	ldr	r3, [pc, #620]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9a:	4a9a      	ldr	r2, [pc, #616]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f9ac 	bl	8001000 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cac:	f7ff f9a8 	bl	8001000 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e130      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cbe:	4b91      	ldr	r3, [pc, #580]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0ef      	beq.n	8001cac <HAL_RCC_OscConfig+0x5cc>
 8001ccc:	e01b      	b.n	8001d06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cce:	4b8d      	ldr	r3, [pc, #564]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd4:	4a8b      	ldr	r2, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7ff f98f 	bl	8001000 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce6:	f7ff f98b 	bl	8001000 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e113      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cf8:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ef      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8107 	beq.w	8001f1e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	f040 80cb 	bne.w	8001eb0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d1a:	4b7a      	ldr	r3, [pc, #488]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f003 0203 	and.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d12c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d123      	bne.n	8001d88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d11b      	bne.n	8001d88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d113      	bne.n	8001d88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6a:	085b      	lsrs	r3, r3, #1
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d109      	bne.n	8001d88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	3b01      	subs	r3, #1
 8001d82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d06d      	beq.n	8001e64 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d068      	beq.n	8001e60 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0ba      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001daa:	4b56      	ldr	r3, [pc, #344]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a55      	ldr	r2, [pc, #340]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001db6:	f7ff f923 	bl	8001000 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7ff f91f 	bl	8001000 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0a7      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd0:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ddc:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_RCC_OscConfig+0x828>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dec:	3a01      	subs	r2, #1
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	4311      	orrs	r1, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001df6:	0212      	lsls	r2, r2, #8
 8001df8:	4311      	orrs	r1, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dfe:	0852      	lsrs	r2, r2, #1
 8001e00:	3a01      	subs	r2, #1
 8001e02:	0552      	lsls	r2, r2, #21
 8001e04:	4311      	orrs	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e0a:	0852      	lsrs	r2, r2, #1
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	0652      	lsls	r2, r2, #25
 8001e10:	4311      	orrs	r1, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e16:	06d2      	lsls	r2, r2, #27
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	493a      	ldr	r1, [pc, #232]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e20:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a37      	ldr	r2, [pc, #220]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e2c:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4a34      	ldr	r2, [pc, #208]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e38:	f7ff f8e2 	bl	8001000 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff f8de 	bl	8001000 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e066      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e5e:	e05e      	b.n	8001f1e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e05d      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d156      	bne.n	8001f1e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e70:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e88:	f7ff f8ba 	bl	8001000 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff f8b6 	bl	8001000 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e03e      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x7b0>
 8001eae:	e036      	b.n	8001f1e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d031      	beq.n	8001f1a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001ebc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d105      	bne.n	8001eda <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001ed4:	f023 0303 	bic.w	r3, r3, #3
 8001ed8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <HAL_RCC_OscConfig+0x824>)
 8001ee0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f889 	bl	8001000 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	e00c      	b.n	8001f0c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff f885 	bl	8001000 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d905      	bls.n	8001f0c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e00d      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
 8001f04:	40021000 	.word	0x40021000
 8001f08:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_OscConfig+0x848>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ec      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x812>
 8001f18:	e001      	b.n	8001f1e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e10f      	b.n	8002164 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b89      	ldr	r3, [pc, #548]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d910      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b86      	ldr	r3, [pc, #536]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 020f 	bic.w	r2, r3, #15
 8001f5a:	4984      	ldr	r1, [pc, #528]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b82      	ldr	r3, [pc, #520]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0f7      	b.n	8002164 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8089 	beq.w	8002094 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d133      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8a:	4b79      	ldr	r3, [pc, #484]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0e4      	b.n	8002164 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001f9a:	f000 fa43 	bl	8002424 <RCC_GetSysClockFreqFromPLLSource>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4b74      	ldr	r3, [pc, #464]	; (8002174 <HAL_RCC_ClockConfig+0x248>)
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d955      	bls.n	8002052 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001fa6:	4b72      	ldr	r3, [pc, #456]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10a      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fb2:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fba:	4a6d      	ldr	r2, [pc, #436]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e044      	b.n	8002052 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d03e      	beq.n	8002052 <HAL_RCC_ClockConfig+0x126>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d13a      	bne.n	8002052 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fdc:	4b64      	ldr	r3, [pc, #400]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fe4:	4a62      	ldr	r2, [pc, #392]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e02f      	b.n	8002052 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d115      	bne.n	8002032 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0ac      	b.n	8002164 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002012:	4b57      	ldr	r3, [pc, #348]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0a0      	b.n	8002164 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002022:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e098      	b.n	8002164 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002032:	f000 f8db 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8002036:	4602      	mov	r2, r0
 8002038:	4b4e      	ldr	r3, [pc, #312]	; (8002174 <HAL_RCC_ClockConfig+0x248>)
 800203a:	429a      	cmp	r2, r3
 800203c:	d909      	bls.n	8002052 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800203e:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002046:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800204c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4944      	ldr	r1, [pc, #272]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002064:	f7fe ffcc 	bl	8001000 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7fe ffc8 	bl	8001000 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e070      	b.n	8002164 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 020c 	and.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b33      	ldr	r3, [pc, #204]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4930      	ldr	r1, [pc, #192]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b80      	cmp	r3, #128	; 0x80
 80020b8:	d105      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020ba:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4a2c      	ldr	r2, [pc, #176]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d210      	bcs.n	80020f6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 020f 	bic.w	r2, r3, #15
 80020dc:	4923      	ldr	r1, [pc, #140]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e036      	b.n	8002164 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4918      	ldr	r1, [pc, #96]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002110:	4313      	orrs	r3, r2
 8002112:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d009      	beq.n	8002134 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4910      	ldr	r1, [pc, #64]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002134:	f000 f85a 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8002138:	4601      	mov	r1, r0
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <HAL_RCC_ClockConfig+0x24c>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	fa21 f303 	lsr.w	r3, r1, r3
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x250>)
 8002152:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_RCC_ClockConfig+0x254>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe ff01 	bl	8000f60 <HAL_InitTick>
 800215e:	4603      	mov	r3, r0
 8002160:	73fb      	strb	r3, [r7, #15]

  return status;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40022000 	.word	0x40022000
 8002170:	40021000 	.word	0x40021000
 8002174:	04c4b400 	.word	0x04c4b400
 8002178:	08004144 	.word	0x08004144
 800217c:	20000000 	.word	0x20000000
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_RCC_MCOConfig+0x64>)
 8002192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <HAL_RCC_MCOConfig+0x64>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_MCOConfig+0x64>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80021a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b2:	2302      	movs	r3, #2
 80021b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c8:	f7ff f80c 	bl	80011e4 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_MCOConfig+0x64>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	430b      	orrs	r3, r1
 80021da:	4903      	ldr	r1, [pc, #12]	; (80021e8 <HAL_RCC_MCOConfig+0x64>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	608b      	str	r3, [r1, #8]
}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000

080021ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x34>
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d121      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d11e      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002220:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800222e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e005      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800223c:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002250:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10d      	bne.n	8002274 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b04      	cmp	r3, #4
 8002262:	d102      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002264:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	e004      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d101      	bne.n	8002274 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002270:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002272:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d133      	bne.n	80022e2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0xa4>
 800228a:	2b03      	cmp	r3, #3
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0xaa>
 800228e:	e005      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002292:	617b      	str	r3, [r7, #20]
      break;
 8002294:	e005      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002298:	617b      	str	r3, [r7, #20]
      break;
 800229a:	e002      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	617b      	str	r3, [r7, #20]
      break;
 80022a0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	3301      	adds	r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	fb02 f203 	mul.w	r2, r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0e5b      	lsrs	r3, r3, #25
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022e2:	69bb      	ldr	r3, [r7, #24]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3724      	adds	r7, #36	; 0x24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40021000 	.word	0x40021000
 80022f4:	0800415c 	.word	0x0800415c
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	007a1200 	.word	0x007a1200

08002300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_GetHCLKFreq+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000

08002318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800231c:	f7ff fff0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002320:	4601      	mov	r1, r0
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	08004154 	.word	0x08004154

08002344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002348:	f7ff ffda 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 800234c:	4601      	mov	r1, r0
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0adb      	lsrs	r3, r3, #11
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_RCC_GetPCLK2Freq+0x28>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	08004154 	.word	0x08004154

08002370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800237c:	4b27      	ldr	r3, [pc, #156]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002388:	f7ff f8d6 	bl	8001538 <HAL_PWREx_GetVoltageRange>
 800238c:	6178      	str	r0, [r7, #20]
 800238e:	e014      	b.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	4a21      	ldr	r2, [pc, #132]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239a:	6593      	str	r3, [r2, #88]	; 0x58
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023a8:	f7ff f8c6 	bl	8001538 <HAL_PWREx_GetVoltageRange>
 80023ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	4a1a      	ldr	r2, [pc, #104]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c0:	d10b      	bne.n	80023da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b80      	cmp	r3, #128	; 0x80
 80023c6:	d913      	bls.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2ba0      	cmp	r3, #160	; 0xa0
 80023cc:	d902      	bls.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ce:	2302      	movs	r3, #2
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	e00d      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023d4:	2301      	movs	r3, #1
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	e00a      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b7f      	cmp	r3, #127	; 0x7f
 80023de:	d902      	bls.n	80023e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80023e0:	2302      	movs	r3, #2
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	e004      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b70      	cmp	r3, #112	; 0x70
 80023ea:	d101      	bne.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023ec:	2301      	movs	r3, #1
 80023ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 020f 	bic.w	r2, r3, #15
 80023f8:	4909      	ldr	r1, [pc, #36]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	40022000 	.word	0x40022000

08002424 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d118      	bne.n	800246c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d107      	bne.n	8002456 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002446:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	e005      	b.n	8002462 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002456:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002462:	4a21      	ldr	r2, [pc, #132]	; (80024e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d002      	beq.n	8002482 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800247c:	2b03      	cmp	r3, #3
 800247e:	d003      	beq.n	8002488 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002480:	e005      	b.n	800248e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002484:	613b      	str	r3, [r7, #16]
    break;
 8002486:	e005      	b.n	8002494 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800248a:	613b      	str	r3, [r7, #16]
    break;
 800248c:	e002      	b.n	8002494 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	613b      	str	r3, [r7, #16]
    break;
 8002492:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3301      	adds	r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	fb02 f203 	mul.w	r2, r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	0e5b      	lsrs	r3, r3, #25
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	3301      	adds	r3, #1
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80024d4:	683b      	ldr	r3, [r7, #0]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	0800415c 	.word	0x0800415c
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	007a1200 	.word	0x007a1200

080024f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024fc:	2300      	movs	r3, #0
 80024fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002500:	2300      	movs	r3, #0
 8002502:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800250c:	2b00      	cmp	r3, #0
 800250e:	d03d      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d00b      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d804      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00e      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002520:	2b20      	cmp	r3, #32
 8002522:	d015      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002524:	e01d      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002526:	2b60      	cmp	r3, #96	; 0x60
 8002528:	d01e      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800252a:	2b80      	cmp	r3, #128	; 0x80
 800252c:	d01c      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800252e:	e018      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002530:	4b86      	ldr	r3, [pc, #536]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a85      	ldr	r2, [pc, #532]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800253c:	e015      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fafd 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 800254a:	4603      	mov	r3, r0
 800254c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800254e:	e00c      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3320      	adds	r3, #32
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fbe4 	bl	8002d24 <RCCEx_PLLSAI2_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002560:	e003      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	74fb      	strb	r3, [r7, #19]
      break;
 8002566:	e000      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002570:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002572:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002576:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257e:	4973      	ldr	r1, [pc, #460]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002586:	e001      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d042      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a0:	d00f      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80025a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a6:	d805      	bhi.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d011      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80025ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b0:	d017      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80025b2:	e01f      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80025b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025b8:	d01f      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025be:	d01c      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025c0:	e018      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025c2:	4b62      	ldr	r3, [pc, #392]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4a61      	ldr	r2, [pc, #388]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025cc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ce:	e015      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fab4 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e0:	e00c      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3320      	adds	r3, #32
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fb9b 	bl	8002d24 <RCCEx_PLLSAI2_Config>
 80025ee:	4603      	mov	r3, r0
 80025f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025f2:	e003      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	74fb      	strb	r3, [r7, #19]
      break;
 80025f8:	e000      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80025fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025fc:	7cfb      	ldrb	r3, [r7, #19]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10b      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002602:	4b52      	ldr	r3, [pc, #328]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	494e      	ldr	r1, [pc, #312]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002618:	e001      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 809f 	beq.w	800276a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262c:	2300      	movs	r3, #0
 800262e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00d      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	4a40      	ldr	r2, [pc, #256]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800264c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002650:	6593      	str	r3, [r2, #88]	; 0x58
 8002652:	4b3e      	ldr	r3, [pc, #248]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265e:	2301      	movs	r3, #1
 8002660:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002662:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3a      	ldr	r2, [pc, #232]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800266e:	f7fe fcc7 	bl	8001000 <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002674:	e009      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002676:	f7fe fcc3 	bl	8001000 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d902      	bls.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	74fb      	strb	r3, [r7, #19]
        break;
 8002688:	e005      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ef      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d15b      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01f      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d019      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026c6:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026e6:	4a19      	ldr	r2, [pc, #100]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d016      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fc82 	bl	8001000 <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fe:	e00b      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fe fc7e 	bl	8001000 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d902      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	74fb      	strb	r3, [r7, #19]
            break;
 8002716:	e006      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0ec      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002726:	7cfb      	ldrb	r3, [r7, #19]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10c      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	4903      	ldr	r1, [pc, #12]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002744:	e008      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	74bb      	strb	r3, [r7, #18]
 800274a:	e005      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002758:	7c7b      	ldrb	r3, [r7, #17]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4ba0      	ldr	r3, [pc, #640]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	4a9f      	ldr	r2, [pc, #636]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002768:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002776:	4b9a      	ldr	r3, [pc, #616]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f023 0203 	bic.w	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	4996      	ldr	r1, [pc, #600]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002798:	4b91      	ldr	r3, [pc, #580]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f023 020c 	bic.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	498e      	ldr	r1, [pc, #568]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ba:	4b89      	ldr	r3, [pc, #548]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	4985      	ldr	r1, [pc, #532]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027dc:	4b80      	ldr	r3, [pc, #512]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	497d      	ldr	r1, [pc, #500]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027fe:	4b78      	ldr	r3, [pc, #480]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	4974      	ldr	r1, [pc, #464]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002820:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	496c      	ldr	r1, [pc, #432]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002850:	4963      	ldr	r1, [pc, #396]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002864:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002872:	495b      	ldr	r1, [pc, #364]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002886:	4b56      	ldr	r3, [pc, #344]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	4952      	ldr	r1, [pc, #328]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028a8:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	494a      	ldr	r1, [pc, #296]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ca:	4b45      	ldr	r3, [pc, #276]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	4941      	ldr	r1, [pc, #260]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	4939      	ldr	r1, [pc, #228]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d028      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291c:	4930      	ldr	r1, [pc, #192]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800292c:	d106      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800292e:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4a2b      	ldr	r2, [pc, #172]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002938:	60d3      	str	r3, [r2, #12]
 800293a:	e011      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002944:	d10c      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	2101      	movs	r1, #1
 800294c:	4618      	mov	r0, r3
 800294e:	f000 f8f9 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d04d      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002974:	d108      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800297c:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002982:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002986:	e012      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800298e:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002994:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a6:	490e      	ldr	r1, [pc, #56]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b6:	d106      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c2:	60d3      	str	r3, [r2, #12]
 80029c4:	e020      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ce:	d109      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a02      	ldr	r2, [pc, #8]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029da:	60d3      	str	r3, [r2, #12]
 80029dc:	e014      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2101      	movs	r1, #1
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f8a5 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d028      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a14:	4b4a      	ldr	r3, [pc, #296]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a22:	4947      	ldr	r1, [pc, #284]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a32:	d106      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a34:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a41      	ldr	r2, [pc, #260]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
 8002a40:	e011      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a4a:	d10c      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f876 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01e      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a82:	492f      	ldr	r1, [pc, #188]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f851 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ac2:	f023 0204 	bic.w	r2, r3, #4
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002acc:	491c      	ldr	r1, [pc, #112]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ae6:	f023 0218 	bic.w	r2, r3, #24
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	4913      	ldr	r1, [pc, #76]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d017      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b14:	490a      	ldr	r1, [pc, #40]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b26:	d105      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b34:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000

08002b44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b52:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00e      	beq.n	8002b7c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0203 	and.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d103      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
       ||
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d13f      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e03c      	b.n	8002bf6 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d00c      	beq.n	8002b9e <RCCEx_PLLSAI1_Config+0x5a>
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d013      	beq.n	8002bb0 <RCCEx_PLLSAI1_Config+0x6c>
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d120      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b8c:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11d      	bne.n	8002bd4 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9c:	e01a      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b9e:	4b5d      	ldr	r3, [pc, #372]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d116      	bne.n	8002bd8 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bae:	e013      	b.n	8002bd8 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bb0:	4b58      	ldr	r3, [pc, #352]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10f      	bne.n	8002bdc <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bbc:	4b55      	ldr	r3, [pc, #340]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bcc:	e006      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd2:	e004      	b.n	8002bde <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002bd4:	bf00      	nop
 8002bd6:	e002      	b.n	8002bde <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002bdc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d108      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002be4:	4b4b      	ldr	r3, [pc, #300]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f023 0203 	bic.w	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4948      	ldr	r1, [pc, #288]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f040 8086 	bne.w	8002d0a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bfe:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a44      	ldr	r2, [pc, #272]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002c04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0a:	f7fe f9f9 	bl	8001000 <HAL_GetTick>
 8002c0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c10:	e009      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c12:	f7fe f9f5 	bl	8001000 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d902      	bls.n	8002c26 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	73fb      	strb	r3, [r7, #15]
        break;
 8002c24:	e005      	b.n	8002c32 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c26:	4b3b      	ldr	r3, [pc, #236]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ef      	bne.n	8002c12 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d168      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d113      	bne.n	8002c66 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c3e:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <RCCEx_PLLSAI1_Config+0x1d4>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6892      	ldr	r2, [r2, #8]
 8002c4a:	0211      	lsls	r1, r2, #8
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68d2      	ldr	r2, [r2, #12]
 8002c50:	06d2      	lsls	r2, r2, #27
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6852      	ldr	r2, [r2, #4]
 8002c58:	3a01      	subs	r2, #1
 8002c5a:	0112      	lsls	r2, r2, #4
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	492d      	ldr	r1, [pc, #180]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	610b      	str	r3, [r1, #16]
 8002c64:	e02d      	b.n	8002cc2 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d115      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6892      	ldr	r2, [r2, #8]
 8002c78:	0211      	lsls	r1, r2, #8
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6912      	ldr	r2, [r2, #16]
 8002c7e:	0852      	lsrs	r2, r2, #1
 8002c80:	3a01      	subs	r2, #1
 8002c82:	0552      	lsls	r2, r2, #21
 8002c84:	4311      	orrs	r1, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6852      	ldr	r2, [r2, #4]
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	4920      	ldr	r1, [pc, #128]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	610b      	str	r3, [r1, #16]
 8002c96:	e014      	b.n	8002cc2 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6892      	ldr	r2, [r2, #8]
 8002ca4:	0211      	lsls	r1, r2, #8
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6952      	ldr	r2, [r2, #20]
 8002caa:	0852      	lsrs	r2, r2, #1
 8002cac:	3a01      	subs	r2, #1
 8002cae:	0652      	lsls	r2, r2, #25
 8002cb0:	4311      	orrs	r1, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6852      	ldr	r2, [r2, #4]
 8002cb6:	3a01      	subs	r2, #1
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	4915      	ldr	r1, [pc, #84]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cc2:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002cc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7fe f997 	bl	8001000 <HAL_GetTick>
 8002cd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cd4:	e009      	b.n	8002cea <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cd6:	f7fe f993 	bl	8001000 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d902      	bls.n	8002cea <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	73fb      	strb	r3, [r7, #15]
          break;
 8002ce8:	e005      	b.n	8002cf6 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0ef      	beq.n	8002cd6 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	4903      	ldr	r1, [pc, #12]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000
 8002d18:	07ff800f 	.word	0x07ff800f
 8002d1c:	ff9f800f 	.word	0xff9f800f
 8002d20:	f9ff800f 	.word	0xf9ff800f

08002d24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d32:	4b70      	ldr	r3, [pc, #448]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00e      	beq.n	8002d5c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d3e:	4b6d      	ldr	r3, [pc, #436]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0203 	and.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d103      	bne.n	8002d56 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
       ||
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d13f      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
 8002d5a:	e03c      	b.n	8002dd6 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d00c      	beq.n	8002d7e <RCCEx_PLLSAI2_Config+0x5a>
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d013      	beq.n	8002d90 <RCCEx_PLLSAI2_Config+0x6c>
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d120      	bne.n	8002dae <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d6c:	4b61      	ldr	r3, [pc, #388]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d11d      	bne.n	8002db4 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7c:	e01a      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d116      	bne.n	8002db8 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8e:	e013      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d90:	4b58      	ldr	r3, [pc, #352]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10f      	bne.n	8002dbc <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d9c:	4b55      	ldr	r3, [pc, #340]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dac:	e006      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
      break;
 8002db2:	e004      	b.n	8002dbe <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002db4:	bf00      	nop
 8002db6:	e002      	b.n	8002dbe <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002dbc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d108      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f023 0203 	bic.w	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4948      	ldr	r1, [pc, #288]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f040 8086 	bne.w	8002eea <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dde:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a44      	ldr	r2, [pc, #272]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dea:	f7fe f909 	bl	8001000 <HAL_GetTick>
 8002dee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002df0:	e009      	b.n	8002e06 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002df2:	f7fe f905 	bl	8001000 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d902      	bls.n	8002e06 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	73fb      	strb	r3, [r7, #15]
        break;
 8002e04:	e005      	b.n	8002e12 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e06:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ef      	bne.n	8002df2 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d168      	bne.n	8002eea <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d113      	bne.n	8002e46 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e1e:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1d4>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6892      	ldr	r2, [r2, #8]
 8002e2a:	0211      	lsls	r1, r2, #8
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68d2      	ldr	r2, [r2, #12]
 8002e30:	06d2      	lsls	r2, r2, #27
 8002e32:	4311      	orrs	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6852      	ldr	r2, [r2, #4]
 8002e38:	3a01      	subs	r2, #1
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	492d      	ldr	r1, [pc, #180]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	614b      	str	r3, [r1, #20]
 8002e44:	e02d      	b.n	8002ea2 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d115      	bne.n	8002e78 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e4c:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6892      	ldr	r2, [r2, #8]
 8002e58:	0211      	lsls	r1, r2, #8
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6912      	ldr	r2, [r2, #16]
 8002e5e:	0852      	lsrs	r2, r2, #1
 8002e60:	3a01      	subs	r2, #1
 8002e62:	0552      	lsls	r2, r2, #21
 8002e64:	4311      	orrs	r1, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6852      	ldr	r2, [r2, #4]
 8002e6a:	3a01      	subs	r2, #1
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	4920      	ldr	r1, [pc, #128]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	614b      	str	r3, [r1, #20]
 8002e76:	e014      	b.n	8002ea2 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6892      	ldr	r2, [r2, #8]
 8002e84:	0211      	lsls	r1, r2, #8
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6952      	ldr	r2, [r2, #20]
 8002e8a:	0852      	lsrs	r2, r2, #1
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	0652      	lsls	r2, r2, #25
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6852      	ldr	r2, [r2, #4]
 8002e96:	3a01      	subs	r2, #1
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	4915      	ldr	r1, [pc, #84]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eae:	f7fe f8a7 	bl	8001000 <HAL_GetTick>
 8002eb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eb4:	e009      	b.n	8002eca <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002eb6:	f7fe f8a3 	bl	8001000 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d902      	bls.n	8002eca <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	73fb      	strb	r3, [r7, #15]
          break;
 8002ec8:	e005      	b.n	8002ed6 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0ef      	beq.n	8002eb6 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d106      	bne.n	8002eea <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	07ff800f 	.word	0x07ff800f
 8002efc:	ff9f800f 	.word	0xff9f800f
 8002f00:	f9ff800f 	.word	0xf9ff800f

08002f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e049      	b.n	8002faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fd ff44 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f000 f958 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d001      	beq.n	8002fcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e047      	b.n	800305c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a23      	ldr	r2, [pc, #140]	; (8003068 <HAL_TIM_Base_Start+0xb4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01d      	beq.n	800301a <HAL_TIM_Base_Start+0x66>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe6:	d018      	beq.n	800301a <HAL_TIM_Base_Start+0x66>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_TIM_Base_Start+0xb8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_TIM_Base_Start+0x66>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <HAL_TIM_Base_Start+0xbc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_TIM_Base_Start+0x66>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_TIM_Base_Start+0xc0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_TIM_Base_Start+0x66>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_TIM_Base_Start+0xc4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_TIM_Base_Start+0x66>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	; (800307c <HAL_TIM_Base_Start+0xc8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d115      	bne.n	8003046 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_TIM_Base_Start+0xcc>)
 8003022:	4013      	ands	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b06      	cmp	r3, #6
 800302a:	d015      	beq.n	8003058 <HAL_TIM_Base_Start+0xa4>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003032:	d011      	beq.n	8003058 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003044:	e008      	b.n	8003058 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e000      	b.n	800305a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003058:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800
 8003074:	40000c00 	.word	0x40000c00
 8003078:	40013400 	.word	0x40013400
 800307c:	40014000 	.word	0x40014000
 8003080:	00010007 	.word	0x00010007

08003084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_TIM_ConfigClockSource+0x18>
 8003098:	2302      	movs	r3, #2
 800309a:	e0a8      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x16a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d067      	beq.n	80031a8 <HAL_TIM_ConfigClockSource+0x124>
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d80b      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x70>
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d073      	beq.n	80031c8 <HAL_TIM_ConfigClockSource+0x144>
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d802      	bhi.n	80030ea <HAL_TIM_ConfigClockSource+0x66>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d06f      	beq.n	80031c8 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030e8:	e078      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d06c      	beq.n	80031c8 <HAL_TIM_ConfigClockSource+0x144>
 80030ee:	2b30      	cmp	r3, #48	; 0x30
 80030f0:	d06a      	beq.n	80031c8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80030f2:	e073      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80030f4:	2b70      	cmp	r3, #112	; 0x70
 80030f6:	d00d      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0x90>
 80030f8:	2b70      	cmp	r3, #112	; 0x70
 80030fa:	d804      	bhi.n	8003106 <HAL_TIM_ConfigClockSource+0x82>
 80030fc:	2b50      	cmp	r3, #80	; 0x50
 80030fe:	d033      	beq.n	8003168 <HAL_TIM_ConfigClockSource+0xe4>
 8003100:	2b60      	cmp	r3, #96	; 0x60
 8003102:	d041      	beq.n	8003188 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003104:	e06a      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310a:	d066      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x156>
 800310c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003110:	d017      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003112:	e063      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6899      	ldr	r1, [r3, #8]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f000 f97c 	bl	8003420 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003136:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	609a      	str	r2, [r3, #8]
      break;
 8003140:	e04c      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6899      	ldr	r1, [r3, #8]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f000 f965 	bl	8003420 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003164:	609a      	str	r2, [r3, #8]
      break;
 8003166:	e039      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	461a      	mov	r2, r3
 8003176:	f000 f8d9 	bl	800332c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2150      	movs	r1, #80	; 0x50
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f932 	bl	80033ea <TIM_ITRx_SetConfig>
      break;
 8003186:	e029      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	461a      	mov	r2, r3
 8003196:	f000 f8f8 	bl	800338a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2160      	movs	r1, #96	; 0x60
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 f922 	bl	80033ea <TIM_ITRx_SetConfig>
      break;
 80031a6:	e019      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	461a      	mov	r2, r3
 80031b6:	f000 f8b9 	bl	800332c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2140      	movs	r1, #64	; 0x40
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 f912 	bl	80033ea <TIM_ITRx_SetConfig>
      break;
 80031c6:	e009      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f000 f909 	bl	80033ea <TIM_ITRx_SetConfig>
        break;
 80031d8:	e000      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x158>
      break;
 80031da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a40      	ldr	r2, [pc, #256]	; (800330c <TIM_Base_SetConfig+0x114>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003216:	d00f      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3d      	ldr	r2, [pc, #244]	; (8003310 <TIM_Base_SetConfig+0x118>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00b      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <TIM_Base_SetConfig+0x11c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d007      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3b      	ldr	r2, [pc, #236]	; (8003318 <TIM_Base_SetConfig+0x120>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d003      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3a      	ldr	r2, [pc, #232]	; (800331c <TIM_Base_SetConfig+0x124>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d108      	bne.n	800324a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a2f      	ldr	r2, [pc, #188]	; (800330c <TIM_Base_SetConfig+0x114>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01f      	beq.n	8003292 <TIM_Base_SetConfig+0x9a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003258:	d01b      	beq.n	8003292 <TIM_Base_SetConfig+0x9a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a2c      	ldr	r2, [pc, #176]	; (8003310 <TIM_Base_SetConfig+0x118>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d017      	beq.n	8003292 <TIM_Base_SetConfig+0x9a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <TIM_Base_SetConfig+0x11c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <TIM_Base_SetConfig+0x9a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2a      	ldr	r2, [pc, #168]	; (8003318 <TIM_Base_SetConfig+0x120>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00f      	beq.n	8003292 <TIM_Base_SetConfig+0x9a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a29      	ldr	r2, [pc, #164]	; (800331c <TIM_Base_SetConfig+0x124>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00b      	beq.n	8003292 <TIM_Base_SetConfig+0x9a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a28      	ldr	r2, [pc, #160]	; (8003320 <TIM_Base_SetConfig+0x128>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <TIM_Base_SetConfig+0x9a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a27      	ldr	r2, [pc, #156]	; (8003324 <TIM_Base_SetConfig+0x12c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d003      	beq.n	8003292 <TIM_Base_SetConfig+0x9a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a26      	ldr	r2, [pc, #152]	; (8003328 <TIM_Base_SetConfig+0x130>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d108      	bne.n	80032a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a10      	ldr	r2, [pc, #64]	; (800330c <TIM_Base_SetConfig+0x114>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00f      	beq.n	80032f0 <TIM_Base_SetConfig+0xf8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a12      	ldr	r2, [pc, #72]	; (800331c <TIM_Base_SetConfig+0x124>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00b      	beq.n	80032f0 <TIM_Base_SetConfig+0xf8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a11      	ldr	r2, [pc, #68]	; (8003320 <TIM_Base_SetConfig+0x128>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d007      	beq.n	80032f0 <TIM_Base_SetConfig+0xf8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a10      	ldr	r2, [pc, #64]	; (8003324 <TIM_Base_SetConfig+0x12c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d003      	beq.n	80032f0 <TIM_Base_SetConfig+0xf8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <TIM_Base_SetConfig+0x130>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d103      	bne.n	80032f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	615a      	str	r2, [r3, #20]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40012c00 	.word	0x40012c00
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800
 8003318:	40000c00 	.word	0x40000c00
 800331c:	40013400 	.word	0x40013400
 8003320:	40014000 	.word	0x40014000
 8003324:	40014400 	.word	0x40014400
 8003328:	40014800 	.word	0x40014800

0800332c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f023 0201 	bic.w	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f023 030a 	bic.w	r3, r3, #10
 8003368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800338a:	b480      	push	{r7}
 800338c:	b087      	sub	sp, #28
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f023 0210 	bic.w	r2, r3, #16
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	031b      	lsls	r3, r3, #12
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	f043 0307 	orr.w	r3, r3, #7
 800340c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	609a      	str	r2, [r3, #8]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800343a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	021a      	lsls	r2, r3, #8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	431a      	orrs	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	609a      	str	r2, [r3, #8]
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003474:	2302      	movs	r3, #2
 8003476:	e068      	b.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2e      	ldr	r2, [pc, #184]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2d      	ldr	r2, [pc, #180]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d108      	bne.n	80034be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01d      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d018      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1b      	ldr	r2, [pc, #108]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a18      	ldr	r2, [pc, #96]	; (8003568 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a13      	ldr	r2, [pc, #76]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a14      	ldr	r2, [pc, #80]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10c      	bne.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4313      	orrs	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40013400 	.word	0x40013400
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40014000 	.word	0x40014000

08003570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e042      	b.n	8003608 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fd fb95 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2224      	movs	r2, #36	; 0x24
 800359e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f82c 	bl	8003610 <UART_SetConfig>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e022      	b.n	8003608 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 faf2 	bl	8003bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fb79 	bl	8003cf8 <UART_CheckIdleState>
 8003606:	4603      	mov	r3, r0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003610:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003614:	b088      	sub	sp, #32
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4313      	orrs	r3, r2
 8003634:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	4313      	orrs	r3, r2
 800363e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4bb1      	ldr	r3, [pc, #708]	; (800390c <UART_SetConfig+0x2fc>)
 8003648:	4013      	ands	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	69f9      	ldr	r1, [r7, #28]
 8003650:	430b      	orrs	r3, r1
 8003652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4aa6      	ldr	r2, [pc, #664]	; (8003910 <UART_SetConfig+0x300>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	4313      	orrs	r3, r2
 8003682:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800368e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	69f9      	ldr	r1, [r7, #28]
 8003698:	430b      	orrs	r3, r1
 800369a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	f023 010f 	bic.w	r1, r3, #15
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a97      	ldr	r2, [pc, #604]	; (8003914 <UART_SetConfig+0x304>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d121      	bne.n	8003700 <UART_SetConfig+0xf0>
 80036bc:	4b96      	ldr	r3, [pc, #600]	; (8003918 <UART_SetConfig+0x308>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d816      	bhi.n	80036f8 <UART_SetConfig+0xe8>
 80036ca:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <UART_SetConfig+0xc0>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	080036e1 	.word	0x080036e1
 80036d4:	080036ed 	.word	0x080036ed
 80036d8:	080036e7 	.word	0x080036e7
 80036dc:	080036f3 	.word	0x080036f3
 80036e0:	2301      	movs	r3, #1
 80036e2:	76fb      	strb	r3, [r7, #27]
 80036e4:	e0e8      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80036e6:	2302      	movs	r3, #2
 80036e8:	76fb      	strb	r3, [r7, #27]
 80036ea:	e0e5      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80036ec:	2304      	movs	r3, #4
 80036ee:	76fb      	strb	r3, [r7, #27]
 80036f0:	e0e2      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80036f2:	2308      	movs	r3, #8
 80036f4:	76fb      	strb	r3, [r7, #27]
 80036f6:	e0df      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80036f8:	2310      	movs	r3, #16
 80036fa:	76fb      	strb	r3, [r7, #27]
 80036fc:	bf00      	nop
 80036fe:	e0db      	b.n	80038b8 <UART_SetConfig+0x2a8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a85      	ldr	r2, [pc, #532]	; (800391c <UART_SetConfig+0x30c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d134      	bne.n	8003774 <UART_SetConfig+0x164>
 800370a:	4b83      	ldr	r3, [pc, #524]	; (8003918 <UART_SetConfig+0x308>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b0c      	cmp	r3, #12
 8003716:	d829      	bhi.n	800376c <UART_SetConfig+0x15c>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <UART_SetConfig+0x110>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003755 	.word	0x08003755
 8003724:	0800376d 	.word	0x0800376d
 8003728:	0800376d 	.word	0x0800376d
 800372c:	0800376d 	.word	0x0800376d
 8003730:	08003761 	.word	0x08003761
 8003734:	0800376d 	.word	0x0800376d
 8003738:	0800376d 	.word	0x0800376d
 800373c:	0800376d 	.word	0x0800376d
 8003740:	0800375b 	.word	0x0800375b
 8003744:	0800376d 	.word	0x0800376d
 8003748:	0800376d 	.word	0x0800376d
 800374c:	0800376d 	.word	0x0800376d
 8003750:	08003767 	.word	0x08003767
 8003754:	2300      	movs	r3, #0
 8003756:	76fb      	strb	r3, [r7, #27]
 8003758:	e0ae      	b.n	80038b8 <UART_SetConfig+0x2a8>
 800375a:	2302      	movs	r3, #2
 800375c:	76fb      	strb	r3, [r7, #27]
 800375e:	e0ab      	b.n	80038b8 <UART_SetConfig+0x2a8>
 8003760:	2304      	movs	r3, #4
 8003762:	76fb      	strb	r3, [r7, #27]
 8003764:	e0a8      	b.n	80038b8 <UART_SetConfig+0x2a8>
 8003766:	2308      	movs	r3, #8
 8003768:	76fb      	strb	r3, [r7, #27]
 800376a:	e0a5      	b.n	80038b8 <UART_SetConfig+0x2a8>
 800376c:	2310      	movs	r3, #16
 800376e:	76fb      	strb	r3, [r7, #27]
 8003770:	bf00      	nop
 8003772:	e0a1      	b.n	80038b8 <UART_SetConfig+0x2a8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a69      	ldr	r2, [pc, #420]	; (8003920 <UART_SetConfig+0x310>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d120      	bne.n	80037c0 <UART_SetConfig+0x1b0>
 800377e:	4b66      	ldr	r3, [pc, #408]	; (8003918 <UART_SetConfig+0x308>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003788:	2b10      	cmp	r3, #16
 800378a:	d00f      	beq.n	80037ac <UART_SetConfig+0x19c>
 800378c:	2b10      	cmp	r3, #16
 800378e:	d802      	bhi.n	8003796 <UART_SetConfig+0x186>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <UART_SetConfig+0x190>
 8003794:	e010      	b.n	80037b8 <UART_SetConfig+0x1a8>
 8003796:	2b20      	cmp	r3, #32
 8003798:	d005      	beq.n	80037a6 <UART_SetConfig+0x196>
 800379a:	2b30      	cmp	r3, #48	; 0x30
 800379c:	d009      	beq.n	80037b2 <UART_SetConfig+0x1a2>
 800379e:	e00b      	b.n	80037b8 <UART_SetConfig+0x1a8>
 80037a0:	2300      	movs	r3, #0
 80037a2:	76fb      	strb	r3, [r7, #27]
 80037a4:	e088      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80037a6:	2302      	movs	r3, #2
 80037a8:	76fb      	strb	r3, [r7, #27]
 80037aa:	e085      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80037ac:	2304      	movs	r3, #4
 80037ae:	76fb      	strb	r3, [r7, #27]
 80037b0:	e082      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80037b2:	2308      	movs	r3, #8
 80037b4:	76fb      	strb	r3, [r7, #27]
 80037b6:	e07f      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80037b8:	2310      	movs	r3, #16
 80037ba:	76fb      	strb	r3, [r7, #27]
 80037bc:	bf00      	nop
 80037be:	e07b      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a57      	ldr	r2, [pc, #348]	; (8003924 <UART_SetConfig+0x314>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d120      	bne.n	800380c <UART_SetConfig+0x1fc>
 80037ca:	4b53      	ldr	r3, [pc, #332]	; (8003918 <UART_SetConfig+0x308>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d00f      	beq.n	80037f8 <UART_SetConfig+0x1e8>
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d802      	bhi.n	80037e2 <UART_SetConfig+0x1d2>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <UART_SetConfig+0x1dc>
 80037e0:	e010      	b.n	8003804 <UART_SetConfig+0x1f4>
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d005      	beq.n	80037f2 <UART_SetConfig+0x1e2>
 80037e6:	2bc0      	cmp	r3, #192	; 0xc0
 80037e8:	d009      	beq.n	80037fe <UART_SetConfig+0x1ee>
 80037ea:	e00b      	b.n	8003804 <UART_SetConfig+0x1f4>
 80037ec:	2300      	movs	r3, #0
 80037ee:	76fb      	strb	r3, [r7, #27]
 80037f0:	e062      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80037f2:	2302      	movs	r3, #2
 80037f4:	76fb      	strb	r3, [r7, #27]
 80037f6:	e05f      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80037f8:	2304      	movs	r3, #4
 80037fa:	76fb      	strb	r3, [r7, #27]
 80037fc:	e05c      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80037fe:	2308      	movs	r3, #8
 8003800:	76fb      	strb	r3, [r7, #27]
 8003802:	e059      	b.n	80038b8 <UART_SetConfig+0x2a8>
 8003804:	2310      	movs	r3, #16
 8003806:	76fb      	strb	r3, [r7, #27]
 8003808:	bf00      	nop
 800380a:	e055      	b.n	80038b8 <UART_SetConfig+0x2a8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a45      	ldr	r2, [pc, #276]	; (8003928 <UART_SetConfig+0x318>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d124      	bne.n	8003860 <UART_SetConfig+0x250>
 8003816:	4b40      	ldr	r3, [pc, #256]	; (8003918 <UART_SetConfig+0x308>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003824:	d012      	beq.n	800384c <UART_SetConfig+0x23c>
 8003826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382a:	d802      	bhi.n	8003832 <UART_SetConfig+0x222>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <UART_SetConfig+0x230>
 8003830:	e012      	b.n	8003858 <UART_SetConfig+0x248>
 8003832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003836:	d006      	beq.n	8003846 <UART_SetConfig+0x236>
 8003838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800383c:	d009      	beq.n	8003852 <UART_SetConfig+0x242>
 800383e:	e00b      	b.n	8003858 <UART_SetConfig+0x248>
 8003840:	2300      	movs	r3, #0
 8003842:	76fb      	strb	r3, [r7, #27]
 8003844:	e038      	b.n	80038b8 <UART_SetConfig+0x2a8>
 8003846:	2302      	movs	r3, #2
 8003848:	76fb      	strb	r3, [r7, #27]
 800384a:	e035      	b.n	80038b8 <UART_SetConfig+0x2a8>
 800384c:	2304      	movs	r3, #4
 800384e:	76fb      	strb	r3, [r7, #27]
 8003850:	e032      	b.n	80038b8 <UART_SetConfig+0x2a8>
 8003852:	2308      	movs	r3, #8
 8003854:	76fb      	strb	r3, [r7, #27]
 8003856:	e02f      	b.n	80038b8 <UART_SetConfig+0x2a8>
 8003858:	2310      	movs	r3, #16
 800385a:	76fb      	strb	r3, [r7, #27]
 800385c:	bf00      	nop
 800385e:	e02b      	b.n	80038b8 <UART_SetConfig+0x2a8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a2a      	ldr	r2, [pc, #168]	; (8003910 <UART_SetConfig+0x300>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d124      	bne.n	80038b4 <UART_SetConfig+0x2a4>
 800386a:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <UART_SetConfig+0x308>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003878:	d012      	beq.n	80038a0 <UART_SetConfig+0x290>
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387e:	d802      	bhi.n	8003886 <UART_SetConfig+0x276>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <UART_SetConfig+0x284>
 8003884:	e012      	b.n	80038ac <UART_SetConfig+0x29c>
 8003886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388a:	d006      	beq.n	800389a <UART_SetConfig+0x28a>
 800388c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003890:	d009      	beq.n	80038a6 <UART_SetConfig+0x296>
 8003892:	e00b      	b.n	80038ac <UART_SetConfig+0x29c>
 8003894:	2300      	movs	r3, #0
 8003896:	76fb      	strb	r3, [r7, #27]
 8003898:	e00e      	b.n	80038b8 <UART_SetConfig+0x2a8>
 800389a:	2302      	movs	r3, #2
 800389c:	76fb      	strb	r3, [r7, #27]
 800389e:	e00b      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80038a0:	2304      	movs	r3, #4
 80038a2:	76fb      	strb	r3, [r7, #27]
 80038a4:	e008      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80038a6:	2308      	movs	r3, #8
 80038a8:	76fb      	strb	r3, [r7, #27]
 80038aa:	e005      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80038ac:	2310      	movs	r3, #16
 80038ae:	76fb      	strb	r3, [r7, #27]
 80038b0:	bf00      	nop
 80038b2:	e001      	b.n	80038b8 <UART_SetConfig+0x2a8>
 80038b4:	2310      	movs	r3, #16
 80038b6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <UART_SetConfig+0x300>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	f040 80a1 	bne.w	8003a06 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038c4:	7efb      	ldrb	r3, [r7, #27]
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d836      	bhi.n	8003938 <UART_SetConfig+0x328>
 80038ca:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <UART_SetConfig+0x2c0>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	080038f5 	.word	0x080038f5
 80038d4:	08003939 	.word	0x08003939
 80038d8:	080038fd 	.word	0x080038fd
 80038dc:	08003939 	.word	0x08003939
 80038e0:	08003903 	.word	0x08003903
 80038e4:	08003939 	.word	0x08003939
 80038e8:	08003939 	.word	0x08003939
 80038ec:	08003939 	.word	0x08003939
 80038f0:	08003931 	.word	0x08003931
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f4:	f7fe fd10 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 80038f8:	6178      	str	r0, [r7, #20]
        break;
 80038fa:	e022      	b.n	8003942 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <UART_SetConfig+0x31c>)
 80038fe:	617b      	str	r3, [r7, #20]
        break;
 8003900:	e01f      	b.n	8003942 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003902:	f7fe fc73 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8003906:	6178      	str	r0, [r7, #20]
        break;
 8003908:	e01b      	b.n	8003942 <UART_SetConfig+0x332>
 800390a:	bf00      	nop
 800390c:	cfff69f3 	.word	0xcfff69f3
 8003910:	40008000 	.word	0x40008000
 8003914:	40013800 	.word	0x40013800
 8003918:	40021000 	.word	0x40021000
 800391c:	40004400 	.word	0x40004400
 8003920:	40004800 	.word	0x40004800
 8003924:	40004c00 	.word	0x40004c00
 8003928:	40005000 	.word	0x40005000
 800392c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003934:	617b      	str	r3, [r7, #20]
        break;
 8003936:	e004      	b.n	8003942 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	76bb      	strb	r3, [r7, #26]
        break;
 8003940:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 811d 	beq.w	8003b84 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	4a97      	ldr	r2, [pc, #604]	; (8003bac <UART_SetConfig+0x59c>)
 8003950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003954:	461a      	mov	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	fbb3 f3f2 	udiv	r3, r3, r2
 800395c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4413      	add	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	d305      	bcc.n	800397a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	429a      	cmp	r2, r3
 8003978:	d902      	bls.n	8003980 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	76bb      	strb	r3, [r7, #26]
 800397e:	e101      	b.n	8003b84 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4618      	mov	r0, r3
 8003984:	f04f 0100 	mov.w	r1, #0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	4a87      	ldr	r2, [pc, #540]	; (8003bac <UART_SetConfig+0x59c>)
 800398e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003992:	b29b      	uxth	r3, r3
 8003994:	f04f 0400 	mov.w	r4, #0
 8003998:	461a      	mov	r2, r3
 800399a:	4623      	mov	r3, r4
 800399c:	f7fc fc2e 	bl	80001fc <__aeabi_uldivmod>
 80039a0:	4603      	mov	r3, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	4619      	mov	r1, r3
 80039a6:	4622      	mov	r2, r4
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	f04f 0400 	mov.w	r4, #0
 80039b0:	0214      	lsls	r4, r2, #8
 80039b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80039b6:	020b      	lsls	r3, r1, #8
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6852      	ldr	r2, [r2, #4]
 80039bc:	0852      	lsrs	r2, r2, #1
 80039be:	4611      	mov	r1, r2
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	eb13 0b01 	adds.w	fp, r3, r1
 80039c8:	eb44 0c02 	adc.w	ip, r4, r2
 80039cc:	4658      	mov	r0, fp
 80039ce:	4661      	mov	r1, ip
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f04f 0400 	mov.w	r4, #0
 80039d8:	461a      	mov	r2, r3
 80039da:	4623      	mov	r3, r4
 80039dc:	f7fc fc0e 	bl	80001fc <__aeabi_uldivmod>
 80039e0:	4603      	mov	r3, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ec:	d308      	bcc.n	8003a00 <UART_SetConfig+0x3f0>
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f4:	d204      	bcs.n	8003a00 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	e0c1      	b.n	8003b84 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	76bb      	strb	r3, [r7, #26]
 8003a04:	e0be      	b.n	8003b84 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0e:	d164      	bne.n	8003ada <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003a10:	7efb      	ldrb	r3, [r7, #27]
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d827      	bhi.n	8003a66 <UART_SetConfig+0x456>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <UART_SetConfig+0x40c>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a49 	.word	0x08003a49
 8003a24:	08003a51 	.word	0x08003a51
 8003a28:	08003a67 	.word	0x08003a67
 8003a2c:	08003a57 	.word	0x08003a57
 8003a30:	08003a67 	.word	0x08003a67
 8003a34:	08003a67 	.word	0x08003a67
 8003a38:	08003a67 	.word	0x08003a67
 8003a3c:	08003a5f 	.word	0x08003a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a40:	f7fe fc6a 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8003a44:	6178      	str	r0, [r7, #20]
        break;
 8003a46:	e013      	b.n	8003a70 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a48:	f7fe fc7c 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 8003a4c:	6178      	str	r0, [r7, #20]
        break;
 8003a4e:	e00f      	b.n	8003a70 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a50:	4b57      	ldr	r3, [pc, #348]	; (8003bb0 <UART_SetConfig+0x5a0>)
 8003a52:	617b      	str	r3, [r7, #20]
        break;
 8003a54:	e00c      	b.n	8003a70 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a56:	f7fe fbc9 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8003a5a:	6178      	str	r0, [r7, #20]
        break;
 8003a5c:	e008      	b.n	8003a70 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a62:	617b      	str	r3, [r7, #20]
        break;
 8003a64:	e004      	b.n	8003a70 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	76bb      	strb	r3, [r7, #26]
        break;
 8003a6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8086 	beq.w	8003b84 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	4a4b      	ldr	r2, [pc, #300]	; (8003bac <UART_SetConfig+0x59c>)
 8003a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a82:	461a      	mov	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a8a:	005a      	lsls	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	441a      	add	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b0f      	cmp	r3, #15
 8003aa4:	d916      	bls.n	8003ad4 <UART_SetConfig+0x4c4>
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aac:	d212      	bcs.n	8003ad4 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f023 030f 	bic.w	r3, r3, #15
 8003ab6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	89fb      	ldrh	r3, [r7, #14]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	89fa      	ldrh	r2, [r7, #14]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	e057      	b.n	8003b84 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	76bb      	strb	r3, [r7, #26]
 8003ad8:	e054      	b.n	8003b84 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ada:	7efb      	ldrb	r3, [r7, #27]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d828      	bhi.n	8003b32 <UART_SetConfig+0x522>
 8003ae0:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <UART_SetConfig+0x4d8>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003b0d 	.word	0x08003b0d
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	08003b1d 	.word	0x08003b1d
 8003af4:	08003b33 	.word	0x08003b33
 8003af8:	08003b23 	.word	0x08003b23
 8003afc:	08003b33 	.word	0x08003b33
 8003b00:	08003b33 	.word	0x08003b33
 8003b04:	08003b33 	.word	0x08003b33
 8003b08:	08003b2b 	.word	0x08003b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f7fe fc04 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8003b10:	6178      	str	r0, [r7, #20]
        break;
 8003b12:	e013      	b.n	8003b3c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b14:	f7fe fc16 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 8003b18:	6178      	str	r0, [r7, #20]
        break;
 8003b1a:	e00f      	b.n	8003b3c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b1c:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <UART_SetConfig+0x5a0>)
 8003b1e:	617b      	str	r3, [r7, #20]
        break;
 8003b20:	e00c      	b.n	8003b3c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b22:	f7fe fb63 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8003b26:	6178      	str	r0, [r7, #20]
        break;
 8003b28:	e008      	b.n	8003b3c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2e:	617b      	str	r3, [r7, #20]
        break;
 8003b30:	e004      	b.n	8003b3c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	76bb      	strb	r3, [r7, #26]
        break;
 8003b3a:	bf00      	nop
    }

    if (pclk != 0U)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d020      	beq.n	8003b84 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	4a19      	ldr	r2, [pc, #100]	; (8003bac <UART_SetConfig+0x59c>)
 8003b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	441a      	add	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	d908      	bls.n	8003b80 <UART_SetConfig+0x570>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d204      	bcs.n	8003b80 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	e001      	b.n	8003b84 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003ba0:	7ebb      	ldrb	r3, [r7, #26]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003bac:	0800418c 	.word	0x0800418c
 8003bb0:	00f42400 	.word	0x00f42400

08003bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01a      	beq.n	8003cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb2:	d10a      	bne.n	8003cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]
  }
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d08:	f7fd f97a 	bl	8001000 <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d10e      	bne.n	8003d3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f82c 	bl	8003d88 <UART_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e022      	b.n	8003d80 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d10e      	bne.n	8003d66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f816 	bl	8003d88 <UART_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e00c      	b.n	8003d80 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d98:	e062      	b.n	8003e60 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d05e      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da2:	f7fd f92d 	bl	8001000 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d302      	bcc.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d11d      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dc6:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e045      	b.n	8003e80 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d02e      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e10:	d126      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e1a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e2a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e00f      	b.n	8003e80 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d08d      	beq.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_UARTEx_DisableFifoMode+0x16>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e027      	b.n	8003eee <HAL_UARTEx_DisableFifoMode+0x66>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2224      	movs	r2, #36	; 0x24
 8003eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ecc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e02d      	b.n	8003f6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2224      	movs	r2, #36	; 0x24
 8003f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f850 	bl	8003ff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e02d      	b.n	8003fea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2224      	movs	r2, #36	; 0x24
 8003f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f812 	bl	8003ff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b089      	sub	sp, #36	; 0x24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003ffc:	4a2f      	ldr	r2, [pc, #188]	; (80040bc <UARTEx_SetNbDataToProcess+0xc8>)
 8003ffe:	f107 0314 	add.w	r3, r7, #20
 8004002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004006:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800400a:	4a2d      	ldr	r2, [pc, #180]	; (80040c0 <UARTEx_SetNbDataToProcess+0xcc>)
 800400c:	f107 030c 	add.w	r3, r7, #12
 8004010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004014:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401c:	2b00      	cmp	r3, #0
 800401e:	d108      	bne.n	8004032 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004030:	e03d      	b.n	80040ae <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004032:	2308      	movs	r3, #8
 8004034:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004036:	2308      	movs	r3, #8
 8004038:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	0e5b      	lsrs	r3, r3, #25
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	0f5b      	lsrs	r3, r3, #29
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800405a:	7fbb      	ldrb	r3, [r7, #30]
 800405c:	7f3a      	ldrb	r2, [r7, #28]
 800405e:	f107 0120 	add.w	r1, r7, #32
 8004062:	440a      	add	r2, r1
 8004064:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004068:	fb02 f303 	mul.w	r3, r2, r3
 800406c:	7f3a      	ldrb	r2, [r7, #28]
 800406e:	f107 0120 	add.w	r1, r7, #32
 8004072:	440a      	add	r2, r1
 8004074:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004078:	fb93 f3f2 	sdiv	r3, r3, r2
 800407c:	b29a      	uxth	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004084:	7ffb      	ldrb	r3, [r7, #31]
 8004086:	7f7a      	ldrb	r2, [r7, #29]
 8004088:	f107 0120 	add.w	r1, r7, #32
 800408c:	440a      	add	r2, r1
 800408e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	7f7a      	ldrb	r2, [r7, #29]
 8004098:	f107 0120 	add.w	r1, r7, #32
 800409c:	440a      	add	r2, r1
 800409e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80040a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80040ae:	bf00      	nop
 80040b0:	3724      	adds	r7, #36	; 0x24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	08004134 	.word	0x08004134
 80040c0:	0800413c 	.word	0x0800413c

080040c4 <__libc_init_array>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	4e0d      	ldr	r6, [pc, #52]	; (80040fc <__libc_init_array+0x38>)
 80040c8:	4c0d      	ldr	r4, [pc, #52]	; (8004100 <__libc_init_array+0x3c>)
 80040ca:	1ba4      	subs	r4, r4, r6
 80040cc:	10a4      	asrs	r4, r4, #2
 80040ce:	2500      	movs	r5, #0
 80040d0:	42a5      	cmp	r5, r4
 80040d2:	d109      	bne.n	80040e8 <__libc_init_array+0x24>
 80040d4:	4e0b      	ldr	r6, [pc, #44]	; (8004104 <__libc_init_array+0x40>)
 80040d6:	4c0c      	ldr	r4, [pc, #48]	; (8004108 <__libc_init_array+0x44>)
 80040d8:	f000 f820 	bl	800411c <_init>
 80040dc:	1ba4      	subs	r4, r4, r6
 80040de:	10a4      	asrs	r4, r4, #2
 80040e0:	2500      	movs	r5, #0
 80040e2:	42a5      	cmp	r5, r4
 80040e4:	d105      	bne.n	80040f2 <__libc_init_array+0x2e>
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
 80040e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040ec:	4798      	blx	r3
 80040ee:	3501      	adds	r5, #1
 80040f0:	e7ee      	b.n	80040d0 <__libc_init_array+0xc>
 80040f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040f6:	4798      	blx	r3
 80040f8:	3501      	adds	r5, #1
 80040fa:	e7f2      	b.n	80040e2 <__libc_init_array+0x1e>
 80040fc:	080041ac 	.word	0x080041ac
 8004100:	080041ac 	.word	0x080041ac
 8004104:	080041ac 	.word	0x080041ac
 8004108:	080041b0 	.word	0x080041b0

0800410c <memset>:
 800410c:	4402      	add	r2, r0
 800410e:	4603      	mov	r3, r0
 8004110:	4293      	cmp	r3, r2
 8004112:	d100      	bne.n	8004116 <memset+0xa>
 8004114:	4770      	bx	lr
 8004116:	f803 1b01 	strb.w	r1, [r3], #1
 800411a:	e7f9      	b.n	8004110 <memset+0x4>

0800411c <_init>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr

08004128 <_fini>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	bf00      	nop
 800412c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412e:	bc08      	pop	{r3}
 8004130:	469e      	mov	lr, r3
 8004132:	4770      	bx	lr
