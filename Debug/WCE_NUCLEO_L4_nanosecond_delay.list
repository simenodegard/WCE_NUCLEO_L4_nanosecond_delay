
WCE_NUCLEO_L4_nanosecond_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d24  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f50  08003f50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f58  08003f58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  08003f6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003f6c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f29f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bfe  00000000  00000000  0002f2db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00030ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e48  00000000  00000000  00031e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002995b  00000000  00000000  00032c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb30  00000000  00000000  0005c5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001054ae  00000000  00000000  000680e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  0016d60c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003ec8 	.word	0x08003ec8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003ec8 	.word	0x08003ec8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fbea 	bl	8000cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f827 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f9df 	bl	80008cc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800050e:	f000 f8a1 	bl	8000654 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000512:	f000 f8ed 	bl	80006f0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000516:	f000 f937 	bl	8000788 <MX_TIM1_Init>
  MX_TIM2_Init();
 800051a:	f000 f989 	bl	8000830 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <main+0x50>)
 8000520:	f002 fc1e 	bl	8002d60 <HAL_TIM_Base_Start>
  int timeDiff = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]

  volatile uint32_t* ODR_B = (volatile uint32_t*) 0x48000014;
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <main+0x54>)
 800052a:	603b      	str	r3, [r7, #0]
  //enables ART accelarator prefetch to flash
  *((volatile uint32_t*) 0x40022000) |= (0b111<<8);
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <main+0x58>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <main+0x58>)
 8000532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000536:	6013      	str	r3, [r2, #0]
	/*---T = 158.4 ns = 6.3 MHz----  */
//	GPIOA->ODR |= 1<<5; // Set the Pin PA5
//	__ASM volatile ("nop");
//	GPIOA->ODR &= ~(1<<5); // Reset the Pin PA5

	GPIOA -> ODR ^= GPIO_PIN_5;
 8000538:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000542:	f083 0320 	eor.w	r3, r3, #32
 8000546:	6153      	str	r3, [r2, #20]
	__ASM volatile ("nop");
 8000548:	bf00      	nop
	GPIOA -> ODR ^= GPIO_PIN_5;
 800054a:	e7f5      	b.n	8000538 <main+0x3c>
 800054c:	2000018c 	.word	0x2000018c
 8000550:	48000014 	.word	0x48000014
 8000554:	40022000 	.word	0x40022000

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b0bc      	sub	sp, #240	; 0xf0
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fca6 	bl	8003eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2294      	movs	r2, #148	; 0x94
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fc98 	bl	8003eb8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000588:	2000      	movs	r0, #0
 800058a:	f000 fecb 	bl	8001324 <HAL_PWREx_ControlVoltageScaling>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000594:	f000 fa44 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a6:	2340      	movs	r3, #64	; 0x40
 80005a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005be:	231e      	movs	r3, #30
 80005c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 ff56 	bl	800148c <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005e6:	f000 fa1b 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2303      	movs	r3, #3
 80005f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000608:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800060c:	2105      	movs	r1, #5
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fb62 	bl	8001cd8 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800061a:	f000 fa01 	bl	8000a20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1;
 800061e:	2324      	movs	r3, #36	; 0x24
 8000620:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000622:	2300      	movs	r3, #0
 8000624:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000626:	2300      	movs	r3, #0
 8000628:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fe37 	bl	80022a0 <HAL_RCCEx_PeriphCLKConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000638:	f000 f9f2 	bl	8000a20 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_4);
 800063c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000640:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000644:	2000      	movs	r0, #0
 8000646:	f001 fc73 	bl	8001f30 <HAL_RCC_MCOConfig>
}
 800064a:	bf00      	nop
 800064c:	37f0      	adds	r7, #240	; 0xf0
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800065a:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <MX_LPUART1_UART_Init+0x94>)
 800065c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000660:	4a22      	ldr	r2, [pc, #136]	; (80006ec <MX_LPUART1_UART_Init+0x98>)
 8000662:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800066a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800069c:	4811      	ldr	r0, [pc, #68]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800069e:	f002 fe3d 	bl	800331c <HAL_UART_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006a8:	f000 f9ba 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	480d      	ldr	r0, [pc, #52]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 80006b0:	f003 faf9 	bl	8003ca6 <HAL_UARTEx_SetTxFifoThreshold>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006ba:	f000 f9b1 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 80006c2:	f003 fb2e 	bl	8003d22 <HAL_UARTEx_SetRxFifoThreshold>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006cc:	f000 f9a8 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 80006d2:	f003 faaf 	bl	8003c34 <HAL_UARTEx_DisableFifoMode>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006dc:	f000 f9a0 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000b4 	.word	0x200000b4
 80006e8:	40008000 	.word	0x40008000
 80006ec:	00033324 	.word	0x00033324

080006f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_USART3_UART_Init+0x90>)
 80006f6:	4a23      	ldr	r2, [pc, #140]	; (8000784 <MX_USART3_UART_Init+0x94>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_USART3_UART_Init+0x90>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_USART3_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_USART3_UART_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_USART3_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_USART3_UART_Init+0x90>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_USART3_UART_Init+0x90>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_USART3_UART_Init+0x90>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_USART3_UART_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_USART3_UART_Init+0x90>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_USART3_UART_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <MX_USART3_UART_Init+0x90>)
 800073a:	f002 fdef 	bl	800331c <HAL_UART_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000744:	f000 f96c 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_USART3_UART_Init+0x90>)
 800074c:	f003 faab 	bl	8003ca6 <HAL_UARTEx_SetTxFifoThreshold>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000756:	f000 f963 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <MX_USART3_UART_Init+0x90>)
 800075e:	f003 fae0 	bl	8003d22 <HAL_UARTEx_SetRxFifoThreshold>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000768:	f000 f95a 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_USART3_UART_Init+0x90>)
 800076e:	f003 fa61 	bl	8003c34 <HAL_UARTEx_DisableFifoMode>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000778:	f000 f952 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000028 	.word	0x20000028
 8000784:	40004800 	.word	0x40004800

08000788 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a6:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007a8:	4a20      	ldr	r2, [pc, #128]	; (800082c <MX_TIM1_Init+0xa4>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d2:	4815      	ldr	r0, [pc, #84]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007d4:	f002 fa6c 	bl	8002cb0 <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007de:	f000 f91f 	bl	8000a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007f0:	f002 fb1e 	bl	8002e30 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007fa:	f000 f911 	bl	8000a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_TIM1_Init+0xa0>)
 8000810:	f002 fcfc 	bl	800320c <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800081a:	f000 f901 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000140 	.word	0x20000140
 800082c:	40012c00 	.word	0x40012c00

08000830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_TIM2_Init+0x98>)
 8000850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000854:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12-1;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_TIM2_Init+0x98>)
 8000858:	220b      	movs	r2, #11
 800085a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_TIM2_Init+0x98>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_TIM2_Init+0x98>)
 8000864:	f04f 32ff 	mov.w	r2, #4294967295
 8000868:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_TIM2_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_TIM2_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MX_TIM2_Init+0x98>)
 8000878:	f002 fa1a 	bl	8002cb0 <HAL_TIM_Base_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000882:	f000 f8cd 	bl	8000a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4619      	mov	r1, r3
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_TIM2_Init+0x98>)
 8000894:	f002 facc 	bl	8002e30 <HAL_TIM_ConfigClockSource>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800089e:	f000 f8bf 	bl	8000a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_TIM2_Init+0x98>)
 80008b0:	f002 fcac 	bl	800320c <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008ba:	f000 f8b1 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3720      	adds	r7, #32
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000018c 	.word	0x2000018c

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b4b      	ldr	r3, [pc, #300]	; (8000a10 <MX_GPIO_Init+0x144>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a4a      	ldr	r2, [pc, #296]	; (8000a10 <MX_GPIO_Init+0x144>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b48      	ldr	r3, [pc, #288]	; (8000a10 <MX_GPIO_Init+0x144>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	61bb      	str	r3, [r7, #24]
 80008f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	4b45      	ldr	r3, [pc, #276]	; (8000a10 <MX_GPIO_Init+0x144>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a44      	ldr	r2, [pc, #272]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b42      	ldr	r3, [pc, #264]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a3e      	ldr	r2, [pc, #248]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <MX_GPIO_Init+0x144>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a38      	ldr	r2, [pc, #224]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a32      	ldr	r2, [pc, #200]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <MX_GPIO_Init+0x144>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a2c      	ldr	r2, [pc, #176]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000972:	f000 fd7b 	bl	800146c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2120      	movs	r1, #32
 800097a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097e:	f000 fc99 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000988:	4822      	ldr	r0, [pc, #136]	; (8000a14 <MX_GPIO_Init+0x148>)
 800098a:	f000 fc93 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <MX_GPIO_Init+0x14c>)
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	481e      	ldr	r0, [pc, #120]	; (8000a1c <MX_GPIO_Init+0x150>)
 80009a4:	f000 faf4 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009a8:	2320      	movs	r3, #32
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c2:	f000 fae5 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80009c6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_GPIO_Init+0x148>)
 80009e0:	f000 fad6 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f000 fac4 	bl	8000f90 <HAL_GPIO_Init>

}
 8000a08:	bf00      	nop
 8000a0a:	3730      	adds	r7, #48	; 0x30
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000400 	.word	0x48000400
 8000a18:	10110000 	.word	0x10110000
 8000a1c:	48000800 	.word	0x48000800

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <Error_Handler+0x6>

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6613      	str	r3, [r2, #96]	; 0x60
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6593      	str	r3, [r2, #88]	; 0x58
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a30      	ldr	r2, [pc, #192]	; (8000b50 <HAL_UART_MspInit+0xe0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d12b      	bne.n	8000aea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a29      	ldr	r2, [pc, #164]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000ac2:	f000 fcd3 	bl	800146c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ac6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481d      	ldr	r0, [pc, #116]	; (8000b58 <HAL_UART_MspInit+0xe8>)
 8000ae4:	f000 fa54 	bl	8000f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ae8:	e02d      	b.n	8000b46 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <HAL_UART_MspInit+0xec>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d128      	bne.n	8000b46 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af8:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afe:	6593      	str	r3, [r2, #88]	; 0x58
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_UART_MspInit+0xe4>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	f003 0308 	and.w	r3, r3, #8
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b36:	2307      	movs	r3, #7
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <HAL_UART_MspInit+0xf0>)
 8000b42:	f000 fa25 	bl	8000f90 <HAL_GPIO_Init>
}
 8000b46:	bf00      	nop
 8000b48:	3730      	adds	r7, #48	; 0x30
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40008000 	.word	0x40008000
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48001800 	.word	0x48001800
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	48000c00 	.word	0x48000c00

08000b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <HAL_TIM_Base_MspInit+0x5c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d10c      	bne.n	8000b90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_TIM_Base_MspInit+0x60>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <HAL_TIM_Base_MspInit+0x60>)
 8000b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b80:	6613      	str	r3, [r2, #96]	; 0x60
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HAL_TIM_Base_MspInit+0x60>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b8e:	e010      	b.n	8000bb2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b98:	d10b      	bne.n	8000bb2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_TIM_Base_MspInit+0x60>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <HAL_TIM_Base_MspInit+0x60>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_TIM_Base_MspInit+0x60>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40012c00 	.word	0x40012c00
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f8b6 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <SystemInit+0x64>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <SystemInit+0x64>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <SystemInit+0x68>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <SystemInit+0x68>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <SystemInit+0x68>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <SystemInit+0x68>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <SystemInit+0x68>)
 8000c48:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c4c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <SystemInit+0x68>)
 8000c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c58:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <SystemInit+0x68>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <SystemInit+0x68>)
 8000c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <SystemInit+0x68>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SystemInit+0x64>)
 8000c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c72:	609a      	str	r2, [r3, #8]
#endif
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00
 8000c84:	40021000 	.word	0x40021000

08000c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c8c:	f7ff ffc6 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c92:	e003      	b.n	8000c9c <LoopCopyDataInit>

08000c94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c9a:	3104      	adds	r1, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c9c:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ca0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ca2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ca4:	d3f6      	bcc.n	8000c94 <CopyDataInit>
	ldr	r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ca8:	e002      	b.n	8000cb0 <LoopFillZerobss>

08000caa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000caa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cac:	f842 3b04 	str.w	r3, [r2], #4

08000cb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <LoopForever+0x16>)
	cmp	r2, r3
 8000cb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cb4:	d3f9      	bcc.n	8000caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f003 f8db 	bl	8003e70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cba:	f7ff fc1f 	bl	80004fc <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000cc4:	08003f60 	.word	0x08003f60
	ldr	r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ccc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000cd0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000cd4:	200001dc 	.word	0x200001dc

08000cd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_IRQHandler>

08000cda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f91f 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f80e 	bl	8000d0c <HAL_InitTick>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	e001      	b.n	8000d00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cfc:	f7ff fe94 	bl	8000a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_InitTick+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d023      	beq.n	8000d68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_InitTick+0x70>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_InitTick+0x6c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f91d 	bl	8000f76 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10f      	bne.n	8000d62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d809      	bhi.n	8000d5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f8f5 	bl	8000f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_InitTick+0x74>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e007      	b.n	8000d6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	e004      	b.n	8000d6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e001      	b.n	8000d6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	200001d8 	.word	0x200001d8

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	200001d8 	.word	0x200001d8

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff47 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff5c 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffb0 	bl	8000ee4 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e166      	b.n	800126e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8158 	beq.w	8001268 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d00b      	beq.n	8000fd8 <HAL_GPIO_Init+0x48>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fcc:	2b11      	cmp	r3, #17
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b12      	cmp	r3, #18
 8000fd6:	d130      	bne.n	800103a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800100e:	2201      	movs	r2, #1
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	f003 0201 	and.w	r2, r3, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0xea>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b12      	cmp	r3, #18
 8001078:	d123      	bne.n	80010c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	6939      	ldr	r1, [r7, #16]
 80010be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0203 	and.w	r2, r3, #3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 80b2 	beq.w	8001268 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	4b61      	ldr	r3, [pc, #388]	; (800128c <HAL_GPIO_Init+0x2fc>)
 8001106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001108:	4a60      	ldr	r2, [pc, #384]	; (800128c <HAL_GPIO_Init+0x2fc>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6613      	str	r3, [r2, #96]	; 0x60
 8001110:	4b5e      	ldr	r3, [pc, #376]	; (800128c <HAL_GPIO_Init+0x2fc>)
 8001112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800111c:	4a5c      	ldr	r2, [pc, #368]	; (8001290 <HAL_GPIO_Init+0x300>)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001146:	d02b      	beq.n	80011a0 <HAL_GPIO_Init+0x210>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_GPIO_Init+0x304>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d025      	beq.n	800119c <HAL_GPIO_Init+0x20c>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a51      	ldr	r2, [pc, #324]	; (8001298 <HAL_GPIO_Init+0x308>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d01f      	beq.n	8001198 <HAL_GPIO_Init+0x208>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a50      	ldr	r2, [pc, #320]	; (800129c <HAL_GPIO_Init+0x30c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d019      	beq.n	8001194 <HAL_GPIO_Init+0x204>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <HAL_GPIO_Init+0x310>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d013      	beq.n	8001190 <HAL_GPIO_Init+0x200>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a4e      	ldr	r2, [pc, #312]	; (80012a4 <HAL_GPIO_Init+0x314>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d00d      	beq.n	800118c <HAL_GPIO_Init+0x1fc>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a4d      	ldr	r2, [pc, #308]	; (80012a8 <HAL_GPIO_Init+0x318>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d007      	beq.n	8001188 <HAL_GPIO_Init+0x1f8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <HAL_GPIO_Init+0x31c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d101      	bne.n	8001184 <HAL_GPIO_Init+0x1f4>
 8001180:	2307      	movs	r3, #7
 8001182:	e00e      	b.n	80011a2 <HAL_GPIO_Init+0x212>
 8001184:	2308      	movs	r3, #8
 8001186:	e00c      	b.n	80011a2 <HAL_GPIO_Init+0x212>
 8001188:	2306      	movs	r3, #6
 800118a:	e00a      	b.n	80011a2 <HAL_GPIO_Init+0x212>
 800118c:	2305      	movs	r3, #5
 800118e:	e008      	b.n	80011a2 <HAL_GPIO_Init+0x212>
 8001190:	2304      	movs	r3, #4
 8001192:	e006      	b.n	80011a2 <HAL_GPIO_Init+0x212>
 8001194:	2303      	movs	r3, #3
 8001196:	e004      	b.n	80011a2 <HAL_GPIO_Init+0x212>
 8001198:	2302      	movs	r3, #2
 800119a:	e002      	b.n	80011a2 <HAL_GPIO_Init+0x212>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <HAL_GPIO_Init+0x212>
 80011a0:	2300      	movs	r3, #0
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	f002 0203 	and.w	r2, r2, #3
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	4093      	lsls	r3, r2
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b2:	4937      	ldr	r1, [pc, #220]	; (8001290 <HAL_GPIO_Init+0x300>)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011c0:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_GPIO_Init+0x320>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e4:	4a32      	ldr	r2, [pc, #200]	; (80012b0 <HAL_GPIO_Init+0x320>)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <HAL_GPIO_Init+0x320>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800120e:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <HAL_GPIO_Init+0x320>)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_GPIO_Init+0x320>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001238:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <HAL_GPIO_Init+0x320>)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <HAL_GPIO_Init+0x320>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001262:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <HAL_GPIO_Init+0x320>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	f47f ae91 	bne.w	8000fa0 <HAL_GPIO_Init+0x10>
  }
}
 800127e:	bf00      	nop
 8001280:	371c      	adds	r7, #28
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	40010000 	.word	0x40010000
 8001294:	48000400 	.word	0x48000400
 8001298:	48000800 	.word	0x48000800
 800129c:	48000c00 	.word	0x48000c00
 80012a0:	48001000 	.word	0x48001000
 80012a4:	48001400 	.word	0x48001400
 80012a8:	48001800 	.word	0x48001800
 80012ac:	48001c00 	.word	0x48001c00
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_PWREx_GetVoltageRange+0x3c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f4:	d102      	bne.n	80012fc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80012f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fa:	e00b      	b.n	8001314 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_PWREx_GetVoltageRange+0x3c>)
 80012fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800130a:	d102      	bne.n	8001312 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800130c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001310:	e000      	b.n	8001314 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001312:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40007000 	.word	0x40007000

08001324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d141      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001332:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800133a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133e:	d131      	bne.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001340:	4b47      	ldr	r3, [pc, #284]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001346:	4a46      	ldr	r2, [pc, #280]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800134c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001350:	4b43      	ldr	r3, [pc, #268]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001358:	4a41      	ldr	r2, [pc, #260]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001360:	4b40      	ldr	r3, [pc, #256]	; (8001464 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2232      	movs	r2, #50	; 0x32
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	4a3f      	ldr	r2, [pc, #252]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	0c9b      	lsrs	r3, r3, #18
 8001372:	3301      	adds	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001376:	e002      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3b01      	subs	r3, #1
 800137c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800137e:	4b38      	ldr	r3, [pc, #224]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d102      	bne.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f2      	bne.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001392:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800139e:	d158      	bne.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e057      	b.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013a4:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013aa:	4a2d      	ldr	r2, [pc, #180]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013b4:	e04d      	b.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013bc:	d141      	bne.n	8001442 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ca:	d131      	bne.n	8001430 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013d2:	4a23      	ldr	r2, [pc, #140]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013e4:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2232      	movs	r2, #50	; 0x32
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	0c9b      	lsrs	r3, r3, #18
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001402:	e002      	b.n	800140a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3b01      	subs	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001416:	d102      	bne.n	800141e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f2      	bne.n	8001404 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142a:	d112      	bne.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e011      	b.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001440:	e007      	b.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001450:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40007000 	.word	0x40007000
 8001464:	20000000 	.word	0x20000000
 8001468:	431bde83 	.word	0x431bde83

0800146c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147a:	6053      	str	r3, [r2, #4]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40007000 	.word	0x40007000

0800148c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	f000 bc16 	b.w	8001ccc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a0:	4ba0      	ldr	r3, [pc, #640]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014aa:	4b9e      	ldr	r3, [pc, #632]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80e4 	beq.w	800168a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <HAL_RCC_OscConfig+0x4c>
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	f040 808b 	bne.w	80015e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	f040 8087 	bne.w	80015e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d8:	4b92      	ldr	r3, [pc, #584]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_OscConfig+0x64>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e3ed      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1a      	ldr	r2, [r3, #32]
 80014f4:	4b8b      	ldr	r3, [pc, #556]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <HAL_RCC_OscConfig+0x7e>
 8001500:	4b88      	ldr	r3, [pc, #544]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001508:	e005      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
 800150a:	4b86      	ldr	r3, [pc, #536]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800150c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001516:	4293      	cmp	r3, r2
 8001518:	d223      	bcs.n	8001562 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fdfc 	bl	800211c <RCC_SetFlashLatencyFromMSIRange>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e3ce      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152e:	4b7d      	ldr	r3, [pc, #500]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7c      	ldr	r2, [pc, #496]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b7a      	ldr	r3, [pc, #488]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4977      	ldr	r1, [pc, #476]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154c:	4b75      	ldr	r3, [pc, #468]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	4972      	ldr	r1, [pc, #456]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
 8001560:	e025      	b.n	80015ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001562:	4b70      	ldr	r3, [pc, #448]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a6f      	ldr	r2, [pc, #444]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b6d      	ldr	r3, [pc, #436]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	496a      	ldr	r1, [pc, #424]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001580:	4b68      	ldr	r3, [pc, #416]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	4965      	ldr	r1, [pc, #404]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fdbc 	bl	800211c <RCC_SetFlashLatencyFromMSIRange>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e38e      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ae:	f000 fcf3 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 80015b2:	4601      	mov	r1, r0
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	4a5a      	ldr	r2, [pc, #360]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80015c0:	5cd3      	ldrb	r3, [r2, r3]
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	fa21 f303 	lsr.w	r3, r1, r3
 80015ca:	4a58      	ldr	r2, [pc, #352]	; (800172c <HAL_RCC_OscConfig+0x2a0>)
 80015cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015ce:	4b58      	ldr	r3, [pc, #352]	; (8001730 <HAL_RCC_OscConfig+0x2a4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fb9a 	bl	8000d0c <HAL_InitTick>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d052      	beq.n	8001688 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	e372      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d032      	beq.n	8001654 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015ee:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a4c      	ldr	r2, [pc, #304]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fbd7 	bl	8000dac <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001602:	f7ff fbd3 	bl	8000dac <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e35b      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001620:	4b40      	ldr	r3, [pc, #256]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a3f      	ldr	r2, [pc, #252]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	493a      	ldr	r1, [pc, #232]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163e:	4b39      	ldr	r3, [pc, #228]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	4935      	ldr	r1, [pc, #212]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
 8001652:	e01a      	b.n	800168a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001654:	4b33      	ldr	r3, [pc, #204]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a32      	ldr	r2, [pc, #200]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001660:	f7ff fba4 	bl	8000dac <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001668:	f7ff fba0 	bl	8000dac <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e328      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x1dc>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001688:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d073      	beq.n	800177e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b08      	cmp	r3, #8
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x21c>
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d10e      	bne.n	80016c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d10b      	bne.n	80016c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d063      	beq.n	800177c <HAL_RCC_OscConfig+0x2f0>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d15f      	bne.n	800177c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e305      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x24c>
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a15      	ldr	r2, [pc, #84]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e01d      	b.n	8001714 <HAL_RCC_OscConfig+0x288>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x270>
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0x288>
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 8001702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a05      	ldr	r2, [pc, #20]	; (8001724 <HAL_RCC_OscConfig+0x298>)
 800170e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01b      	beq.n	8001754 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fb46 	bl	8000dac <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001722:	e010      	b.n	8001746 <HAL_RCC_OscConfig+0x2ba>
 8001724:	40021000 	.word	0x40021000
 8001728:	08003ef0 	.word	0x08003ef0
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fb3a 	bl	8000dac <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e2c2      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001746:	4baf      	ldr	r3, [pc, #700]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x2a8>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fb2a 	bl	8000dac <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fb26 	bl	8000dac <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e2ae      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176e:	4ba5      	ldr	r3, [pc, #660]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x2d0>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d060      	beq.n	800184c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d005      	beq.n	800179c <HAL_RCC_OscConfig+0x310>
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d119      	bne.n	80017ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d116      	bne.n	80017ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800179c:	4b99      	ldr	r3, [pc, #612]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x328>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e28b      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b93      	ldr	r3, [pc, #588]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	061b      	lsls	r3, r3, #24
 80017c2:	4990      	ldr	r1, [pc, #576]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c8:	e040      	b.n	800184c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d023      	beq.n	800181a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d2:	4b8c      	ldr	r3, [pc, #560]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a8b      	ldr	r2, [pc, #556]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff fae5 	bl	8000dac <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fae1 	bl	8000dac <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e269      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f8:	4b82      	ldr	r3, [pc, #520]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	061b      	lsls	r3, r3, #24
 8001812:	497c      	ldr	r1, [pc, #496]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	e018      	b.n	800184c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a79      	ldr	r2, [pc, #484]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff fac1 	bl	8000dac <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff fabd 	bl	8000dac <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e245      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001840:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d03c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01c      	beq.n	800189a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001866:	4a67      	ldr	r2, [pc, #412]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff fa9c 	bl	8000dac <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff fa98 	bl	8000dac <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e220      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800188a:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 800188c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0ef      	beq.n	8001878 <HAL_RCC_OscConfig+0x3ec>
 8001898:	e01b      	b.n	80018d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189a:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 800189c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a0:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa7f 	bl	8000dac <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff fa7b 	bl	8000dac <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e203      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c4:	4b4f      	ldr	r3, [pc, #316]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80018c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ef      	bne.n	80018b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80a6 	beq.w	8001a2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018e4:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10d      	bne.n	800190c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f0:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	4a43      	ldr	r2, [pc, #268]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6593      	str	r3, [r2, #88]	; 0x58
 80018fc:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001908:	2301      	movs	r3, #1
 800190a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800190c:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <HAL_RCC_OscConfig+0x57c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d118      	bne.n	800194a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCC_OscConfig+0x57c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a3a      	ldr	r2, [pc, #232]	; (8001a08 <HAL_RCC_OscConfig+0x57c>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001924:	f7ff fa42 	bl	8000dac <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192c:	f7ff fa3e 	bl	8000dac <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1c6      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193e:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <HAL_RCC_OscConfig+0x57c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d108      	bne.n	8001964 <HAL_RCC_OscConfig+0x4d8>
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001958:	4a2a      	ldr	r2, [pc, #168]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001962:	e024      	b.n	80019ae <HAL_RCC_OscConfig+0x522>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b05      	cmp	r3, #5
 800196a:	d110      	bne.n	800198e <HAL_RCC_OscConfig+0x502>
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800198c:	e00f      	b.n	80019ae <HAL_RCC_OscConfig+0x522>
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001994:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80019a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a4:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80019a6:	f023 0304 	bic.w	r3, r3, #4
 80019aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d016      	beq.n	80019e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff f9f9 	bl	8000dac <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff f9f5 	bl	8000dac <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e17b      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_OscConfig+0x578>)
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0ed      	beq.n	80019be <HAL_RCC_OscConfig+0x532>
 80019e2:	e01a      	b.n	8001a1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e4:	f7ff f9e2 	bl	8000dac <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ea:	e00f      	b.n	8001a0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ec:	f7ff f9de 	bl	8000dac <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d906      	bls.n	8001a0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e164      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a0c:	4ba8      	ldr	r3, [pc, #672]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1e8      	bne.n	80019ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a1a:	7ffb      	ldrb	r3, [r7, #31]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4ba3      	ldr	r3, [pc, #652]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	4aa2      	ldr	r2, [pc, #648]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d03c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a40:	4b9b      	ldr	r3, [pc, #620]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a46:	4a9a      	ldr	r2, [pc, #616]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f9ac 	bl	8000dac <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a58:	f7ff f9a8 	bl	8000dac <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e130      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a6a:	4b91      	ldr	r3, [pc, #580]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ef      	beq.n	8001a58 <HAL_RCC_OscConfig+0x5cc>
 8001a78:	e01b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a7a:	4b8d      	ldr	r3, [pc, #564]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a80:	4a8b      	ldr	r2, [pc, #556]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f98f 	bl	8000dac <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a92:	f7ff f98b 	bl	8000dac <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e113      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aa4:	4b82      	ldr	r3, [pc, #520]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1ef      	bne.n	8001a92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8107 	beq.w	8001cca <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	f040 80cb 	bne.w	8001c5c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ac6:	4b7a      	ldr	r3, [pc, #488]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0203 	and.w	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d12c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d123      	bne.n	8001b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d11b      	bne.n	8001b34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d113      	bne.n	8001b34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d109      	bne.n	8001b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d06d      	beq.n	8001c10 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d068      	beq.n	8001c0c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d105      	bne.n	8001b52 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b46:	4b5a      	ldr	r3, [pc, #360]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0ba      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b56:	4b56      	ldr	r3, [pc, #344]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a55      	ldr	r2, [pc, #340]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b62:	f7ff f923 	bl	8000dac <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff f91f 	bl	8000dac <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e0a7      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <HAL_RCC_OscConfig+0x828>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b98:	3a01      	subs	r2, #1
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	4311      	orrs	r1, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ba2:	0212      	lsls	r2, r2, #8
 8001ba4:	4311      	orrs	r1, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001baa:	0852      	lsrs	r2, r2, #1
 8001bac:	3a01      	subs	r2, #1
 8001bae:	0552      	lsls	r2, r2, #21
 8001bb0:	4311      	orrs	r1, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bb6:	0852      	lsrs	r2, r2, #1
 8001bb8:	3a01      	subs	r2, #1
 8001bba:	0652      	lsls	r2, r2, #25
 8001bbc:	4311      	orrs	r1, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bc2:	06d2      	lsls	r2, r2, #27
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	493a      	ldr	r1, [pc, #232]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bcc:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a37      	ldr	r2, [pc, #220]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4a34      	ldr	r2, [pc, #208]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001be4:	f7ff f8e2 	bl	8000dac <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff f8de 	bl	8000dac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e066      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c0a:	e05e      	b.n	8001cca <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e05d      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d156      	bne.n	8001cca <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a20      	ldr	r2, [pc, #128]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c34:	f7ff f8ba 	bl	8000dac <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff f8b6 	bl	8000dac <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e03e      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x7b0>
 8001c5a:	e036      	b.n	8001cca <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d031      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c80:	f023 0303 	bic.w	r3, r3, #3
 8001c84:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c94:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7ff f889 	bl	8000dac <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9c:	e00c      	b.n	8001cb8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff f885 	bl	8000dac <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d905      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e00d      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_RCC_OscConfig+0x848>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ec      	bne.n	8001c9e <HAL_RCC_OscConfig+0x812>
 8001cc4:	e001      	b.n	8001cca <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e10f      	b.n	8001f10 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b89      	ldr	r3, [pc, #548]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d910      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b86      	ldr	r3, [pc, #536]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 020f 	bic.w	r2, r3, #15
 8001d06:	4984      	ldr	r1, [pc, #528]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0f7      	b.n	8001f10 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8089 	beq.w	8001e40 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d133      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	4b79      	ldr	r3, [pc, #484]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0e4      	b.n	8001f10 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d46:	f000 fa43 	bl	80021d0 <RCC_GetSysClockFreqFromPLLSource>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b74      	ldr	r3, [pc, #464]	; (8001f20 <HAL_RCC_ClockConfig+0x248>)
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d955      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d52:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10a      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d66:	4a6d      	ldr	r2, [pc, #436]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e044      	b.n	8001dfe <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d03e      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x126>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d13a      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d88:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d90:	4a62      	ldr	r2, [pc, #392]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d96:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e02f      	b.n	8001dfe <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d115      	bne.n	8001dde <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0ac      	b.n	8001f10 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dbe:	4b57      	ldr	r3, [pc, #348]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0a0      	b.n	8001f10 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dce:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e098      	b.n	8001f10 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001dde:	f000 f8db 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <HAL_RCC_ClockConfig+0x248>)
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d909      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dea:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001df2:	4a4a      	ldr	r2, [pc, #296]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b47      	ldr	r3, [pc, #284]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4944      	ldr	r1, [pc, #272]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e10:	f7fe ffcc 	bl	8000dac <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7fe ffc8 	bl	8000dac <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e070      	b.n	8001f10 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 020c 	and.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1eb      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4930      	ldr	r1, [pc, #192]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b80      	cmp	r3, #128	; 0x80
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e66:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4a2c      	ldr	r2, [pc, #176]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e70:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e72:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d210      	bcs.n	8001ea2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e80:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 020f 	bic.w	r2, r3, #15
 8001e88:	4923      	ldr	r1, [pc, #140]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e036      	b.n	8001f10 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4918      	ldr	r1, [pc, #96]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ecc:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4910      	ldr	r1, [pc, #64]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ee0:	f000 f85a 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	4a0c      	ldr	r2, [pc, #48]	; (8001f24 <HAL_RCC_ClockConfig+0x24c>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8001efc:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_RCC_ClockConfig+0x250>)
 8001efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe ff01 	bl	8000d0c <HAL_InitTick>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	04c4b400 	.word	0x04c4b400
 8001f24:	08003ef0 	.word	0x08003ef0
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_RCC_MCOConfig+0x64>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_RCC_MCOConfig+0x64>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_RCC_MCOConfig+0x64>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8001f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f74:	f7ff f80c 	bl	8000f90 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_MCOConfig+0x64>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_MCOConfig+0x64>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	; (800209c <HAL_RCC_GetSysClockFreq+0x104>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_RCC_GetSysClockFreq+0x104>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x34>
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d121      	bne.n	800200a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d11e      	bne.n	800200a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fcc:	4b33      	ldr	r3, [pc, #204]	; (800209c <HAL_RCC_GetSysClockFreq+0x104>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fd8:	4b30      	ldr	r3, [pc, #192]	; (800209c <HAL_RCC_GetSysClockFreq+0x104>)
 8001fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e005      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	; (800209c <HAL_RCC_GetSysClockFreq+0x104>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10d      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b04      	cmp	r3, #4
 800200e:	d102      	bne.n	8002016 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002010:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	e004      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d101      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800201c:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800201e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d133      	bne.n	800208e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_RCC_GetSysClockFreq+0x104>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d002      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0xa4>
 8002036:	2b03      	cmp	r3, #3
 8002038:	d003      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0xaa>
 800203a:	e005      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800203e:	617b      	str	r3, [r7, #20]
      break;
 8002040:	e005      	b.n	800204e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002044:	617b      	str	r3, [r7, #20]
      break;
 8002046:	e002      	b.n	800204e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	617b      	str	r3, [r7, #20]
      break;
 800204c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_RCC_GetSysClockFreq+0x104>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	3301      	adds	r3, #1
 800205a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_RCC_GetSysClockFreq+0x104>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	fb02 f203 	mul.w	r2, r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_GetSysClockFreq+0x104>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0e5b      	lsrs	r3, r3, #25
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	3301      	adds	r3, #1
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800208e:	69bb      	ldr	r3, [r7, #24]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3724      	adds	r7, #36	; 0x24
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000
 80020a0:	08003f08 	.word	0x08003f08
 80020a4:	00f42400 	.word	0x00f42400
 80020a8:	007a1200 	.word	0x007a1200

080020ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000000 	.word	0x20000000

080020c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020c8:	f7ff fff0 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020cc:	4601      	mov	r1, r0
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08003f00 	.word	0x08003f00

080020f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020f4:	f7ff ffda 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020f8:	4601      	mov	r1, r0
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0adb      	lsrs	r3, r3, #11
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	08003f00 	.word	0x08003f00

0800211c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002134:	f7ff f8d6 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8002138:	6178      	str	r0, [r7, #20]
 800213a:	e014      	b.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002146:	6593      	str	r3, [r2, #88]	; 0x58
 8002148:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002154:	f7ff f8c6 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8002158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800216c:	d10b      	bne.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d913      	bls.n	800219c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2ba0      	cmp	r3, #160	; 0xa0
 8002178:	d902      	bls.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800217a:	2302      	movs	r3, #2
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e00d      	b.n	800219c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002180:	2301      	movs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	e00a      	b.n	800219c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b7f      	cmp	r3, #127	; 0x7f
 800218a:	d902      	bls.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800218c:	2302      	movs	r3, #2
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e004      	b.n	800219c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b70      	cmp	r3, #112	; 0x70
 8002196:	d101      	bne.n	800219c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002198:	2301      	movs	r3, #1
 800219a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 020f 	bic.w	r2, r3, #15
 80021a4:	4909      	ldr	r1, [pc, #36]	; (80021cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d001      	beq.n	80021be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40022000 	.word	0x40022000

080021d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d118      	bne.n	8002218 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d107      	bne.n	8002202 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	e005      	b.n	800220e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800220e:	4a21      	ldr	r2, [pc, #132]	; (8002294 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002216:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d002      	beq.n	800222e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002228:	2b03      	cmp	r3, #3
 800222a:	d003      	beq.n	8002234 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800222c:	e005      	b.n	800223a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002230:	613b      	str	r3, [r7, #16]
    break;
 8002232:	e005      	b.n	8002240 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002236:	613b      	str	r3, [r7, #16]
    break;
 8002238:	e002      	b.n	8002240 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	613b      	str	r3, [r7, #16]
    break;
 800223e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3301      	adds	r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	fb02 f203 	mul.w	r2, r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	0e5b      	lsrs	r3, r3, #25
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	3301      	adds	r3, #1
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	fbb2 f3f3 	udiv	r3, r2, r3
 800227e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002280:	683b      	ldr	r3, [r7, #0]
}
 8002282:	4618      	mov	r0, r3
 8002284:	371c      	adds	r7, #28
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	08003f08 	.word	0x08003f08
 8002298:	00f42400 	.word	0x00f42400
 800229c:	007a1200 	.word	0x007a1200

080022a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022a8:	2300      	movs	r3, #0
 80022aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022ac:	2300      	movs	r3, #0
 80022ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d03d      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d00b      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d804      	bhi.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00e      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	d015      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80022d0:	e01d      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80022d2:	2b60      	cmp	r3, #96	; 0x60
 80022d4:	d01e      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022d6:	2b80      	cmp	r3, #128	; 0x80
 80022d8:	d01c      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022da:	e018      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022dc:	4b86      	ldr	r3, [pc, #536]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a85      	ldr	r2, [pc, #532]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e8:	e015      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fafd 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 80022f6:	4603      	mov	r3, r0
 80022f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022fa:	e00c      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3320      	adds	r3, #32
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fbe4 	bl	8002ad0 <RCCEx_PLLSAI2_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800230c:	e003      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	74fb      	strb	r3, [r7, #19]
      break;
 8002312:	e000      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800231c:	4b76      	ldr	r3, [pc, #472]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800231e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002322:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800232a:	4973      	ldr	r1, [pc, #460]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002332:	e001      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d042      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234c:	d00f      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800234e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002352:	d805      	bhi.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d011      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235c:	d017      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800235e:	e01f      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002364:	d01f      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236a:	d01c      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800236c:	e018      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800236e:	4b62      	ldr	r3, [pc, #392]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	4a61      	ldr	r2, [pc, #388]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800237a:	e015      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fab4 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800238c:	e00c      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3320      	adds	r3, #32
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fb9b 	bl	8002ad0 <RCCEx_PLLSAI2_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800239e:	e003      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	74fb      	strb	r3, [r7, #19]
      break;
 80023a4:	e000      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80023a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10b      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023ae:	4b52      	ldr	r3, [pc, #328]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	494e      	ldr	r1, [pc, #312]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80023c4:	e001      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 809f 	beq.w	8002516 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d8:	2300      	movs	r3, #0
 80023da:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023dc:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023ec:	2300      	movs	r3, #0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00d      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	4a40      	ldr	r2, [pc, #256]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6593      	str	r3, [r2, #88]	; 0x58
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240a:	2301      	movs	r3, #1
 800240c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800240e:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a3a      	ldr	r2, [pc, #232]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800241a:	f7fe fcc7 	bl	8000dac <HAL_GetTick>
 800241e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002420:	e009      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7fe fcc3 	bl	8000dac <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d902      	bls.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	74fb      	strb	r3, [r7, #19]
        break;
 8002434:	e005      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002436:	4b31      	ldr	r3, [pc, #196]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0ef      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d15b      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002452:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01f      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	429a      	cmp	r2, r3
 8002464:	d019      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002470:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002478:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002492:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d016      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fc82 	bl	8000dac <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024aa:	e00b      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe fc7e 	bl	8000dac <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d902      	bls.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	74fb      	strb	r3, [r7, #19]
            break;
 80024c2:	e006      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0ec      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80024d2:	7cfb      	ldrb	r3, [r7, #19]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024f0:	e008      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024f2:	7cfb      	ldrb	r3, [r7, #19]
 80024f4:	74bb      	strb	r3, [r7, #18]
 80024f6:	e005      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002504:	7c7b      	ldrb	r3, [r7, #17]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d105      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250a:	4ba0      	ldr	r3, [pc, #640]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	4a9f      	ldr	r2, [pc, #636]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002514:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002522:	4b9a      	ldr	r3, [pc, #616]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002528:	f023 0203 	bic.w	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002530:	4996      	ldr	r1, [pc, #600]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002544:	4b91      	ldr	r3, [pc, #580]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	f023 020c 	bic.w	r2, r3, #12
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	498e      	ldr	r1, [pc, #568]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002566:	4b89      	ldr	r3, [pc, #548]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	4985      	ldr	r1, [pc, #532]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002588:	4b80      	ldr	r3, [pc, #512]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002596:	497d      	ldr	r1, [pc, #500]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025aa:	4b78      	ldr	r3, [pc, #480]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	4974      	ldr	r1, [pc, #464]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025cc:	4b6f      	ldr	r3, [pc, #444]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025da:	496c      	ldr	r1, [pc, #432]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ee:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025fc:	4963      	ldr	r1, [pc, #396]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002610:	4b5e      	ldr	r3, [pc, #376]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800261e:	495b      	ldr	r1, [pc, #364]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002632:	4b56      	ldr	r3, [pc, #344]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002638:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	4952      	ldr	r1, [pc, #328]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002654:	4b4d      	ldr	r3, [pc, #308]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	494a      	ldr	r1, [pc, #296]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002676:	4b45      	ldr	r3, [pc, #276]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	4941      	ldr	r1, [pc, #260]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002698:	4b3c      	ldr	r3, [pc, #240]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800269e:	f023 0203 	bic.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a6:	4939      	ldr	r1, [pc, #228]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d028      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ba:	4b34      	ldr	r3, [pc, #208]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c8:	4930      	ldr	r1, [pc, #192]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d8:	d106      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026da:	4b2c      	ldr	r3, [pc, #176]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	4a2b      	ldr	r2, [pc, #172]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e4:	60d3      	str	r3, [r2, #12]
 80026e6:	e011      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026f0:	d10c      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2101      	movs	r1, #1
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 f8f9 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002702:	7cfb      	ldrb	r3, [r7, #19]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d04d      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800271c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002720:	d108      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002728:	4a18      	ldr	r2, [pc, #96]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800272e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002732:	e012      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800273a:	4a14      	ldr	r2, [pc, #80]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002740:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002752:	490e      	ldr	r1, [pc, #56]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800275e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002762:	d106      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a08      	ldr	r2, [pc, #32]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800276e:	60d3      	str	r3, [r2, #12]
 8002770:	e020      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800277a:	d109      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a02      	ldr	r2, [pc, #8]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002786:	60d3      	str	r3, [r2, #12]
 8002788:	e014      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002798:	d10c      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	2101      	movs	r1, #1
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f8a5 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d028      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027c0:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ce:	4947      	ldr	r1, [pc, #284]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027de:	d106      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e0:	4b42      	ldr	r3, [pc, #264]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a41      	ldr	r2, [pc, #260]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ea:	60d3      	str	r3, [r2, #12]
 80027ec:	e011      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f6:	d10c      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	2101      	movs	r1, #1
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f876 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01e      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800281e:	4b33      	ldr	r3, [pc, #204]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800282e:	492f      	ldr	r1, [pc, #188]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800283c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002840:	d10c      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	2102      	movs	r1, #2
 8002848:	4618      	mov	r0, r3
 800284a:	f000 f851 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 800284e:	4603      	mov	r3, r0
 8002850:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00b      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800286a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800286e:	f023 0204 	bic.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002878:	491c      	ldr	r1, [pc, #112]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800288e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002892:	f023 0218 	bic.w	r2, r3, #24
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	4913      	ldr	r1, [pc, #76]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d017      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c0:	490a      	ldr	r1, [pc, #40]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028d2:	d105      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000

080028f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028fe:	4b70      	ldr	r3, [pc, #448]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00e      	beq.n	8002928 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800290a:	4b6d      	ldr	r3, [pc, #436]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0203 	and.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d103      	bne.n	8002922 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
       ||
 800291e:	2b00      	cmp	r3, #0
 8002920:	d13f      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	e03c      	b.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d00c      	beq.n	800294a <RCCEx_PLLSAI1_Config+0x5a>
 8002930:	2b03      	cmp	r3, #3
 8002932:	d013      	beq.n	800295c <RCCEx_PLLSAI1_Config+0x6c>
 8002934:	2b01      	cmp	r3, #1
 8002936:	d120      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002938:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11d      	bne.n	8002980 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002948:	e01a      	b.n	8002980 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800294a:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002952:	2b00      	cmp	r3, #0
 8002954:	d116      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800295a:	e013      	b.n	8002984 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800295c:	4b58      	ldr	r3, [pc, #352]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10f      	bne.n	8002988 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002968:	4b55      	ldr	r3, [pc, #340]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002978:	e006      	b.n	8002988 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
      break;
 800297e:	e004      	b.n	800298a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002980:	bf00      	nop
 8002982:	e002      	b.n	800298a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002984:	bf00      	nop
 8002986:	e000      	b.n	800298a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002988:	bf00      	nop
    }

    if(status == HAL_OK)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d108      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002990:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f023 0203 	bic.w	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4948      	ldr	r1, [pc, #288]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f040 8086 	bne.w	8002ab6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029aa:	4b45      	ldr	r3, [pc, #276]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a44      	ldr	r2, [pc, #272]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80029b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b6:	f7fe f9f9 	bl	8000dac <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029bc:	e009      	b.n	80029d2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029be:	f7fe f9f5 	bl	8000dac <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d902      	bls.n	80029d2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	73fb      	strb	r3, [r7, #15]
        break;
 80029d0:	e005      	b.n	80029de <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029d2:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ef      	bne.n	80029be <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d168      	bne.n	8002ab6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d113      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ea:	4b35      	ldr	r3, [pc, #212]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d4>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6892      	ldr	r2, [r2, #8]
 80029f6:	0211      	lsls	r1, r2, #8
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68d2      	ldr	r2, [r2, #12]
 80029fc:	06d2      	lsls	r2, r2, #27
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6852      	ldr	r2, [r2, #4]
 8002a04:	3a01      	subs	r2, #1
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	492d      	ldr	r1, [pc, #180]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	610b      	str	r3, [r1, #16]
 8002a10:	e02d      	b.n	8002a6e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d115      	bne.n	8002a44 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a18:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6892      	ldr	r2, [r2, #8]
 8002a24:	0211      	lsls	r1, r2, #8
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6912      	ldr	r2, [r2, #16]
 8002a2a:	0852      	lsrs	r2, r2, #1
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	0552      	lsls	r2, r2, #21
 8002a30:	4311      	orrs	r1, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6852      	ldr	r2, [r2, #4]
 8002a36:	3a01      	subs	r2, #1
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	4920      	ldr	r1, [pc, #128]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	610b      	str	r3, [r1, #16]
 8002a42:	e014      	b.n	8002a6e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6892      	ldr	r2, [r2, #8]
 8002a50:	0211      	lsls	r1, r2, #8
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6952      	ldr	r2, [r2, #20]
 8002a56:	0852      	lsrs	r2, r2, #1
 8002a58:	3a01      	subs	r2, #1
 8002a5a:	0652      	lsls	r2, r2, #25
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6852      	ldr	r2, [r2, #4]
 8002a62:	3a01      	subs	r2, #1
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	430a      	orrs	r2, r1
 8002a68:	4915      	ldr	r1, [pc, #84]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7a:	f7fe f997 	bl	8000dac <HAL_GetTick>
 8002a7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a80:	e009      	b.n	8002a96 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a82:	f7fe f993 	bl	8000dac <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d902      	bls.n	8002a96 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	73fb      	strb	r3, [r7, #15]
          break;
 8002a94:	e005      	b.n	8002aa2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0ef      	beq.n	8002a82 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	07ff800f 	.word	0x07ff800f
 8002ac8:	ff9f800f 	.word	0xff9f800f
 8002acc:	f9ff800f 	.word	0xf9ff800f

08002ad0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ade:	4b70      	ldr	r3, [pc, #448]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00e      	beq.n	8002b08 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002aea:	4b6d      	ldr	r3, [pc, #436]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0203 	and.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d103      	bne.n	8002b02 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
       ||
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d13f      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	e03c      	b.n	8002b82 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d00c      	beq.n	8002b2a <RCCEx_PLLSAI2_Config+0x5a>
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d013      	beq.n	8002b3c <RCCEx_PLLSAI2_Config+0x6c>
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d120      	bne.n	8002b5a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b18:	4b61      	ldr	r3, [pc, #388]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d11d      	bne.n	8002b60 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b28:	e01a      	b.n	8002b60 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d116      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3a:	e013      	b.n	8002b64 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b3c:	4b58      	ldr	r3, [pc, #352]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10f      	bne.n	8002b68 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b48:	4b55      	ldr	r3, [pc, #340]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b58:	e006      	b.n	8002b68 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5e:	e004      	b.n	8002b6a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002b60:	bf00      	nop
 8002b62:	e002      	b.n	8002b6a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002b64:	bf00      	nop
 8002b66:	e000      	b.n	8002b6a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002b68:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d108      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002b70:	4b4b      	ldr	r3, [pc, #300]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f023 0203 	bic.w	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4948      	ldr	r1, [pc, #288]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 8086 	bne.w	8002c96 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a44      	ldr	r2, [pc, #272]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b96:	f7fe f909 	bl	8000dac <HAL_GetTick>
 8002b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b9c:	e009      	b.n	8002bb2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b9e:	f7fe f905 	bl	8000dac <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d902      	bls.n	8002bb2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	73fb      	strb	r3, [r7, #15]
        break;
 8002bb0:	e005      	b.n	8002bbe <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bb2:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ef      	bne.n	8002b9e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d168      	bne.n	8002c96 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d113      	bne.n	8002bf2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bca:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	4b35      	ldr	r3, [pc, #212]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1d4>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6892      	ldr	r2, [r2, #8]
 8002bd6:	0211      	lsls	r1, r2, #8
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	68d2      	ldr	r2, [r2, #12]
 8002bdc:	06d2      	lsls	r2, r2, #27
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6852      	ldr	r2, [r2, #4]
 8002be4:	3a01      	subs	r2, #1
 8002be6:	0112      	lsls	r2, r2, #4
 8002be8:	430a      	orrs	r2, r1
 8002bea:	492d      	ldr	r1, [pc, #180]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	614b      	str	r3, [r1, #20]
 8002bf0:	e02d      	b.n	8002c4e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d115      	bne.n	8002c24 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bf8:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6892      	ldr	r2, [r2, #8]
 8002c04:	0211      	lsls	r1, r2, #8
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6912      	ldr	r2, [r2, #16]
 8002c0a:	0852      	lsrs	r2, r2, #1
 8002c0c:	3a01      	subs	r2, #1
 8002c0e:	0552      	lsls	r2, r2, #21
 8002c10:	4311      	orrs	r1, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6852      	ldr	r2, [r2, #4]
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0112      	lsls	r2, r2, #4
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	4920      	ldr	r1, [pc, #128]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	614b      	str	r3, [r1, #20]
 8002c22:	e014      	b.n	8002c4e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	4b20      	ldr	r3, [pc, #128]	; (8002cac <RCCEx_PLLSAI2_Config+0x1dc>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6892      	ldr	r2, [r2, #8]
 8002c30:	0211      	lsls	r1, r2, #8
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6952      	ldr	r2, [r2, #20]
 8002c36:	0852      	lsrs	r2, r2, #1
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	0652      	lsls	r2, r2, #25
 8002c3c:	4311      	orrs	r1, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6852      	ldr	r2, [r2, #4]
 8002c42:	3a01      	subs	r2, #1
 8002c44:	0112      	lsls	r2, r2, #4
 8002c46:	430a      	orrs	r2, r1
 8002c48:	4915      	ldr	r1, [pc, #84]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5a:	f7fe f8a7 	bl	8000dac <HAL_GetTick>
 8002c5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c60:	e009      	b.n	8002c76 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c62:	f7fe f8a3 	bl	8000dac <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d902      	bls.n	8002c76 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	73fb      	strb	r3, [r7, #15]
          break;
 8002c74:	e005      	b.n	8002c82 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0ef      	beq.n	8002c62 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4903      	ldr	r1, [pc, #12]	; (8002ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	07ff800f 	.word	0x07ff800f
 8002ca8:	ff9f800f 	.word	0xff9f800f
 8002cac:	f9ff800f 	.word	0xf9ff800f

08002cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e049      	b.n	8002d56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd ff44 	bl	8000b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f000 f958 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d001      	beq.n	8002d78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e047      	b.n	8002e08 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a23      	ldr	r2, [pc, #140]	; (8002e14 <HAL_TIM_Base_Start+0xb4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01d      	beq.n	8002dc6 <HAL_TIM_Base_Start+0x66>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d92:	d018      	beq.n	8002dc6 <HAL_TIM_Base_Start+0x66>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <HAL_TIM_Base_Start+0xb8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_TIM_Base_Start+0x66>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1e      	ldr	r2, [pc, #120]	; (8002e1c <HAL_TIM_Base_Start+0xbc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_TIM_Base_Start+0x66>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <HAL_TIM_Base_Start+0xc0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_TIM_Base_Start+0x66>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <HAL_TIM_Base_Start+0xc4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_TIM_Base_Start+0x66>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_TIM_Base_Start+0xc8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d115      	bne.n	8002df2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <HAL_TIM_Base_Start+0xcc>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b06      	cmp	r3, #6
 8002dd6:	d015      	beq.n	8002e04 <HAL_TIM_Base_Start+0xa4>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dde:	d011      	beq.n	8002e04 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df0:	e008      	b.n	8002e04 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	e000      	b.n	8002e06 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	40013400 	.word	0x40013400
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	00010007 	.word	0x00010007

08002e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_TIM_ConfigClockSource+0x18>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e0a8      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x16a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b40      	cmp	r3, #64	; 0x40
 8002e82:	d067      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0x124>
 8002e84:	2b40      	cmp	r3, #64	; 0x40
 8002e86:	d80b      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x70>
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d073      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0x144>
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d802      	bhi.n	8002e96 <HAL_TIM_ConfigClockSource+0x66>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d06f      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e94:	e078      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d06c      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0x144>
 8002e9a:	2b30      	cmp	r3, #48	; 0x30
 8002e9c:	d06a      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002e9e:	e073      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ea0:	2b70      	cmp	r3, #112	; 0x70
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_TIM_ConfigClockSource+0x90>
 8002ea4:	2b70      	cmp	r3, #112	; 0x70
 8002ea6:	d804      	bhi.n	8002eb2 <HAL_TIM_ConfigClockSource+0x82>
 8002ea8:	2b50      	cmp	r3, #80	; 0x50
 8002eaa:	d033      	beq.n	8002f14 <HAL_TIM_ConfigClockSource+0xe4>
 8002eac:	2b60      	cmp	r3, #96	; 0x60
 8002eae:	d041      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002eb0:	e06a      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb6:	d066      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x156>
 8002eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebc:	d017      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002ebe:	e063      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6899      	ldr	r1, [r3, #8]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f000 f97c 	bl	80031cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ee2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	609a      	str	r2, [r3, #8]
      break;
 8002eec:	e04c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6899      	ldr	r1, [r3, #8]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f000 f965 	bl	80031cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f10:	609a      	str	r2, [r3, #8]
      break;
 8002f12:	e039      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	461a      	mov	r2, r3
 8002f22:	f000 f8d9 	bl	80030d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2150      	movs	r1, #80	; 0x50
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f932 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002f32:	e029      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	461a      	mov	r2, r3
 8002f42:	f000 f8f8 	bl	8003136 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2160      	movs	r1, #96	; 0x60
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f922 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002f52:	e019      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	461a      	mov	r2, r3
 8002f62:	f000 f8b9 	bl	80030d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2140      	movs	r1, #64	; 0x40
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 f912 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002f72:	e009      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f000 f909 	bl	8003196 <TIM_ITRx_SetConfig>
        break;
 8002f84:	e000      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a40      	ldr	r2, [pc, #256]	; (80030b8 <TIM_Base_SetConfig+0x114>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	d00f      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a3d      	ldr	r2, [pc, #244]	; (80030bc <TIM_Base_SetConfig+0x118>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a3c      	ldr	r2, [pc, #240]	; (80030c0 <TIM_Base_SetConfig+0x11c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d007      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a3b      	ldr	r2, [pc, #236]	; (80030c4 <TIM_Base_SetConfig+0x120>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a3a      	ldr	r2, [pc, #232]	; (80030c8 <TIM_Base_SetConfig+0x124>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d108      	bne.n	8002ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <TIM_Base_SetConfig+0x114>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01f      	beq.n	800303e <TIM_Base_SetConfig+0x9a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003004:	d01b      	beq.n	800303e <TIM_Base_SetConfig+0x9a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a2c      	ldr	r2, [pc, #176]	; (80030bc <TIM_Base_SetConfig+0x118>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d017      	beq.n	800303e <TIM_Base_SetConfig+0x9a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a2b      	ldr	r2, [pc, #172]	; (80030c0 <TIM_Base_SetConfig+0x11c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <TIM_Base_SetConfig+0x9a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a2a      	ldr	r2, [pc, #168]	; (80030c4 <TIM_Base_SetConfig+0x120>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00f      	beq.n	800303e <TIM_Base_SetConfig+0x9a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a29      	ldr	r2, [pc, #164]	; (80030c8 <TIM_Base_SetConfig+0x124>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00b      	beq.n	800303e <TIM_Base_SetConfig+0x9a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a28      	ldr	r2, [pc, #160]	; (80030cc <TIM_Base_SetConfig+0x128>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x9a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <TIM_Base_SetConfig+0x12c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x9a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <TIM_Base_SetConfig+0x130>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <TIM_Base_SetConfig+0x114>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00f      	beq.n	800309c <TIM_Base_SetConfig+0xf8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <TIM_Base_SetConfig+0x124>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00b      	beq.n	800309c <TIM_Base_SetConfig+0xf8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a11      	ldr	r2, [pc, #68]	; (80030cc <TIM_Base_SetConfig+0x128>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d007      	beq.n	800309c <TIM_Base_SetConfig+0xf8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <TIM_Base_SetConfig+0x12c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d003      	beq.n	800309c <TIM_Base_SetConfig+0xf8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a0f      	ldr	r2, [pc, #60]	; (80030d4 <TIM_Base_SetConfig+0x130>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d103      	bne.n	80030a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	615a      	str	r2, [r3, #20]
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800
 80030c4:	40000c00 	.word	0x40000c00
 80030c8:	40013400 	.word	0x40013400
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40014400 	.word	0x40014400
 80030d4:	40014800 	.word	0x40014800

080030d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f023 0201 	bic.w	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 030a 	bic.w	r3, r3, #10
 8003114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003136:	b480      	push	{r7}
 8003138:	b087      	sub	sp, #28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f023 0210 	bic.w	r2, r3, #16
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	031b      	lsls	r3, r3, #12
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003172:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	621a      	str	r2, [r3, #32]
}
 800318a:	bf00      	nop
 800318c:	371c      	adds	r7, #28
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003196:	b480      	push	{r7}
 8003198:	b085      	sub	sp, #20
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f043 0307 	orr.w	r3, r3, #7
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	609a      	str	r2, [r3, #8]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	021a      	lsls	r2, r3, #8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	609a      	str	r2, [r3, #8]
}
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003220:	2302      	movs	r3, #2
 8003222:	e068      	b.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2e      	ldr	r2, [pc, #184]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d004      	beq.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2d      	ldr	r2, [pc, #180]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d108      	bne.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800325e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003270:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01d      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d018      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1a      	ldr	r2, [pc, #104]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10c      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40012c00 	.word	0x40012c00
 8003308:	40013400 	.word	0x40013400
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40014000 	.word	0x40014000

0800331c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e042      	b.n	80033b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003334:	2b00      	cmp	r3, #0
 8003336:	d106      	bne.n	8003346 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7fd fb95 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2224      	movs	r2, #36	; 0x24
 800334a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f82c 	bl	80033bc <UART_SetConfig>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e022      	b.n	80033b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 faf2 	bl	8003960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800338a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800339a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fb79 	bl	8003aa4 <UART_CheckIdleState>
 80033b2:	4603      	mov	r3, r0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80033c0:	b088      	sub	sp, #32
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4bb1      	ldr	r3, [pc, #708]	; (80036b8 <UART_SetConfig+0x2fc>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	69f9      	ldr	r1, [r7, #28]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4aa6      	ldr	r2, [pc, #664]	; (80036bc <UART_SetConfig+0x300>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	4313      	orrs	r3, r2
 800342e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800343a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	69f9      	ldr	r1, [r7, #28]
 8003444:	430b      	orrs	r3, r1
 8003446:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	f023 010f 	bic.w	r1, r3, #15
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a97      	ldr	r2, [pc, #604]	; (80036c0 <UART_SetConfig+0x304>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d121      	bne.n	80034ac <UART_SetConfig+0xf0>
 8003468:	4b96      	ldr	r3, [pc, #600]	; (80036c4 <UART_SetConfig+0x308>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b03      	cmp	r3, #3
 8003474:	d816      	bhi.n	80034a4 <UART_SetConfig+0xe8>
 8003476:	a201      	add	r2, pc, #4	; (adr r2, 800347c <UART_SetConfig+0xc0>)
 8003478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347c:	0800348d 	.word	0x0800348d
 8003480:	08003499 	.word	0x08003499
 8003484:	08003493 	.word	0x08003493
 8003488:	0800349f 	.word	0x0800349f
 800348c:	2301      	movs	r3, #1
 800348e:	76fb      	strb	r3, [r7, #27]
 8003490:	e0e8      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003492:	2302      	movs	r3, #2
 8003494:	76fb      	strb	r3, [r7, #27]
 8003496:	e0e5      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003498:	2304      	movs	r3, #4
 800349a:	76fb      	strb	r3, [r7, #27]
 800349c:	e0e2      	b.n	8003664 <UART_SetConfig+0x2a8>
 800349e:	2308      	movs	r3, #8
 80034a0:	76fb      	strb	r3, [r7, #27]
 80034a2:	e0df      	b.n	8003664 <UART_SetConfig+0x2a8>
 80034a4:	2310      	movs	r3, #16
 80034a6:	76fb      	strb	r3, [r7, #27]
 80034a8:	bf00      	nop
 80034aa:	e0db      	b.n	8003664 <UART_SetConfig+0x2a8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a85      	ldr	r2, [pc, #532]	; (80036c8 <UART_SetConfig+0x30c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d134      	bne.n	8003520 <UART_SetConfig+0x164>
 80034b6:	4b83      	ldr	r3, [pc, #524]	; (80036c4 <UART_SetConfig+0x308>)
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d829      	bhi.n	8003518 <UART_SetConfig+0x15c>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0x110>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	08003501 	.word	0x08003501
 80034d0:	08003519 	.word	0x08003519
 80034d4:	08003519 	.word	0x08003519
 80034d8:	08003519 	.word	0x08003519
 80034dc:	0800350d 	.word	0x0800350d
 80034e0:	08003519 	.word	0x08003519
 80034e4:	08003519 	.word	0x08003519
 80034e8:	08003519 	.word	0x08003519
 80034ec:	08003507 	.word	0x08003507
 80034f0:	08003519 	.word	0x08003519
 80034f4:	08003519 	.word	0x08003519
 80034f8:	08003519 	.word	0x08003519
 80034fc:	08003513 	.word	0x08003513
 8003500:	2300      	movs	r3, #0
 8003502:	76fb      	strb	r3, [r7, #27]
 8003504:	e0ae      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003506:	2302      	movs	r3, #2
 8003508:	76fb      	strb	r3, [r7, #27]
 800350a:	e0ab      	b.n	8003664 <UART_SetConfig+0x2a8>
 800350c:	2304      	movs	r3, #4
 800350e:	76fb      	strb	r3, [r7, #27]
 8003510:	e0a8      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003512:	2308      	movs	r3, #8
 8003514:	76fb      	strb	r3, [r7, #27]
 8003516:	e0a5      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003518:	2310      	movs	r3, #16
 800351a:	76fb      	strb	r3, [r7, #27]
 800351c:	bf00      	nop
 800351e:	e0a1      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a69      	ldr	r2, [pc, #420]	; (80036cc <UART_SetConfig+0x310>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d120      	bne.n	800356c <UART_SetConfig+0x1b0>
 800352a:	4b66      	ldr	r3, [pc, #408]	; (80036c4 <UART_SetConfig+0x308>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003534:	2b10      	cmp	r3, #16
 8003536:	d00f      	beq.n	8003558 <UART_SetConfig+0x19c>
 8003538:	2b10      	cmp	r3, #16
 800353a:	d802      	bhi.n	8003542 <UART_SetConfig+0x186>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <UART_SetConfig+0x190>
 8003540:	e010      	b.n	8003564 <UART_SetConfig+0x1a8>
 8003542:	2b20      	cmp	r3, #32
 8003544:	d005      	beq.n	8003552 <UART_SetConfig+0x196>
 8003546:	2b30      	cmp	r3, #48	; 0x30
 8003548:	d009      	beq.n	800355e <UART_SetConfig+0x1a2>
 800354a:	e00b      	b.n	8003564 <UART_SetConfig+0x1a8>
 800354c:	2300      	movs	r3, #0
 800354e:	76fb      	strb	r3, [r7, #27]
 8003550:	e088      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003552:	2302      	movs	r3, #2
 8003554:	76fb      	strb	r3, [r7, #27]
 8003556:	e085      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003558:	2304      	movs	r3, #4
 800355a:	76fb      	strb	r3, [r7, #27]
 800355c:	e082      	b.n	8003664 <UART_SetConfig+0x2a8>
 800355e:	2308      	movs	r3, #8
 8003560:	76fb      	strb	r3, [r7, #27]
 8003562:	e07f      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003564:	2310      	movs	r3, #16
 8003566:	76fb      	strb	r3, [r7, #27]
 8003568:	bf00      	nop
 800356a:	e07b      	b.n	8003664 <UART_SetConfig+0x2a8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a57      	ldr	r2, [pc, #348]	; (80036d0 <UART_SetConfig+0x314>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d120      	bne.n	80035b8 <UART_SetConfig+0x1fc>
 8003576:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <UART_SetConfig+0x308>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d00f      	beq.n	80035a4 <UART_SetConfig+0x1e8>
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d802      	bhi.n	800358e <UART_SetConfig+0x1d2>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <UART_SetConfig+0x1dc>
 800358c:	e010      	b.n	80035b0 <UART_SetConfig+0x1f4>
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d005      	beq.n	800359e <UART_SetConfig+0x1e2>
 8003592:	2bc0      	cmp	r3, #192	; 0xc0
 8003594:	d009      	beq.n	80035aa <UART_SetConfig+0x1ee>
 8003596:	e00b      	b.n	80035b0 <UART_SetConfig+0x1f4>
 8003598:	2300      	movs	r3, #0
 800359a:	76fb      	strb	r3, [r7, #27]
 800359c:	e062      	b.n	8003664 <UART_SetConfig+0x2a8>
 800359e:	2302      	movs	r3, #2
 80035a0:	76fb      	strb	r3, [r7, #27]
 80035a2:	e05f      	b.n	8003664 <UART_SetConfig+0x2a8>
 80035a4:	2304      	movs	r3, #4
 80035a6:	76fb      	strb	r3, [r7, #27]
 80035a8:	e05c      	b.n	8003664 <UART_SetConfig+0x2a8>
 80035aa:	2308      	movs	r3, #8
 80035ac:	76fb      	strb	r3, [r7, #27]
 80035ae:	e059      	b.n	8003664 <UART_SetConfig+0x2a8>
 80035b0:	2310      	movs	r3, #16
 80035b2:	76fb      	strb	r3, [r7, #27]
 80035b4:	bf00      	nop
 80035b6:	e055      	b.n	8003664 <UART_SetConfig+0x2a8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a45      	ldr	r2, [pc, #276]	; (80036d4 <UART_SetConfig+0x318>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d124      	bne.n	800360c <UART_SetConfig+0x250>
 80035c2:	4b40      	ldr	r3, [pc, #256]	; (80036c4 <UART_SetConfig+0x308>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d0:	d012      	beq.n	80035f8 <UART_SetConfig+0x23c>
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d6:	d802      	bhi.n	80035de <UART_SetConfig+0x222>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <UART_SetConfig+0x230>
 80035dc:	e012      	b.n	8003604 <UART_SetConfig+0x248>
 80035de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e2:	d006      	beq.n	80035f2 <UART_SetConfig+0x236>
 80035e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035e8:	d009      	beq.n	80035fe <UART_SetConfig+0x242>
 80035ea:	e00b      	b.n	8003604 <UART_SetConfig+0x248>
 80035ec:	2300      	movs	r3, #0
 80035ee:	76fb      	strb	r3, [r7, #27]
 80035f0:	e038      	b.n	8003664 <UART_SetConfig+0x2a8>
 80035f2:	2302      	movs	r3, #2
 80035f4:	76fb      	strb	r3, [r7, #27]
 80035f6:	e035      	b.n	8003664 <UART_SetConfig+0x2a8>
 80035f8:	2304      	movs	r3, #4
 80035fa:	76fb      	strb	r3, [r7, #27]
 80035fc:	e032      	b.n	8003664 <UART_SetConfig+0x2a8>
 80035fe:	2308      	movs	r3, #8
 8003600:	76fb      	strb	r3, [r7, #27]
 8003602:	e02f      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003604:	2310      	movs	r3, #16
 8003606:	76fb      	strb	r3, [r7, #27]
 8003608:	bf00      	nop
 800360a:	e02b      	b.n	8003664 <UART_SetConfig+0x2a8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2a      	ldr	r2, [pc, #168]	; (80036bc <UART_SetConfig+0x300>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d124      	bne.n	8003660 <UART_SetConfig+0x2a4>
 8003616:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <UART_SetConfig+0x308>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003624:	d012      	beq.n	800364c <UART_SetConfig+0x290>
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362a:	d802      	bhi.n	8003632 <UART_SetConfig+0x276>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <UART_SetConfig+0x284>
 8003630:	e012      	b.n	8003658 <UART_SetConfig+0x29c>
 8003632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003636:	d006      	beq.n	8003646 <UART_SetConfig+0x28a>
 8003638:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800363c:	d009      	beq.n	8003652 <UART_SetConfig+0x296>
 800363e:	e00b      	b.n	8003658 <UART_SetConfig+0x29c>
 8003640:	2300      	movs	r3, #0
 8003642:	76fb      	strb	r3, [r7, #27]
 8003644:	e00e      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003646:	2302      	movs	r3, #2
 8003648:	76fb      	strb	r3, [r7, #27]
 800364a:	e00b      	b.n	8003664 <UART_SetConfig+0x2a8>
 800364c:	2304      	movs	r3, #4
 800364e:	76fb      	strb	r3, [r7, #27]
 8003650:	e008      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003652:	2308      	movs	r3, #8
 8003654:	76fb      	strb	r3, [r7, #27]
 8003656:	e005      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003658:	2310      	movs	r3, #16
 800365a:	76fb      	strb	r3, [r7, #27]
 800365c:	bf00      	nop
 800365e:	e001      	b.n	8003664 <UART_SetConfig+0x2a8>
 8003660:	2310      	movs	r3, #16
 8003662:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a14      	ldr	r2, [pc, #80]	; (80036bc <UART_SetConfig+0x300>)
 800366a:	4293      	cmp	r3, r2
 800366c:	f040 80a1 	bne.w	80037b2 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003670:	7efb      	ldrb	r3, [r7, #27]
 8003672:	2b08      	cmp	r3, #8
 8003674:	d836      	bhi.n	80036e4 <UART_SetConfig+0x328>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <UART_SetConfig+0x2c0>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	080036a1 	.word	0x080036a1
 8003680:	080036e5 	.word	0x080036e5
 8003684:	080036a9 	.word	0x080036a9
 8003688:	080036e5 	.word	0x080036e5
 800368c:	080036af 	.word	0x080036af
 8003690:	080036e5 	.word	0x080036e5
 8003694:	080036e5 	.word	0x080036e5
 8003698:	080036e5 	.word	0x080036e5
 800369c:	080036dd 	.word	0x080036dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036a0:	f7fe fd10 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
 80036a4:	6178      	str	r0, [r7, #20]
        break;
 80036a6:	e022      	b.n	80036ee <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <UART_SetConfig+0x31c>)
 80036aa:	617b      	str	r3, [r7, #20]
        break;
 80036ac:	e01f      	b.n	80036ee <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ae:	f7fe fc73 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 80036b2:	6178      	str	r0, [r7, #20]
        break;
 80036b4:	e01b      	b.n	80036ee <UART_SetConfig+0x332>
 80036b6:	bf00      	nop
 80036b8:	cfff69f3 	.word	0xcfff69f3
 80036bc:	40008000 	.word	0x40008000
 80036c0:	40013800 	.word	0x40013800
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40004400 	.word	0x40004400
 80036cc:	40004800 	.word	0x40004800
 80036d0:	40004c00 	.word	0x40004c00
 80036d4:	40005000 	.word	0x40005000
 80036d8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e0:	617b      	str	r3, [r7, #20]
        break;
 80036e2:	e004      	b.n	80036ee <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	76bb      	strb	r3, [r7, #26]
        break;
 80036ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 811d 	beq.w	8003930 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	4a97      	ldr	r2, [pc, #604]	; (8003958 <UART_SetConfig+0x59c>)
 80036fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003700:	461a      	mov	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	fbb3 f3f2 	udiv	r3, r3, r2
 8003708:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	d305      	bcc.n	8003726 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	d902      	bls.n	800372c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	76bb      	strb	r3, [r7, #26]
 800372a:	e101      	b.n	8003930 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	4618      	mov	r0, r3
 8003730:	f04f 0100 	mov.w	r1, #0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	4a87      	ldr	r2, [pc, #540]	; (8003958 <UART_SetConfig+0x59c>)
 800373a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800373e:	b29b      	uxth	r3, r3
 8003740:	f04f 0400 	mov.w	r4, #0
 8003744:	461a      	mov	r2, r3
 8003746:	4623      	mov	r3, r4
 8003748:	f7fc fd58 	bl	80001fc <__aeabi_uldivmod>
 800374c:	4603      	mov	r3, r0
 800374e:	460c      	mov	r4, r1
 8003750:	4619      	mov	r1, r3
 8003752:	4622      	mov	r2, r4
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	0214      	lsls	r4, r2, #8
 800375e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003762:	020b      	lsls	r3, r1, #8
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6852      	ldr	r2, [r2, #4]
 8003768:	0852      	lsrs	r2, r2, #1
 800376a:	4611      	mov	r1, r2
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	eb13 0b01 	adds.w	fp, r3, r1
 8003774:	eb44 0c02 	adc.w	ip, r4, r2
 8003778:	4658      	mov	r0, fp
 800377a:	4661      	mov	r1, ip
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f04f 0400 	mov.w	r4, #0
 8003784:	461a      	mov	r2, r3
 8003786:	4623      	mov	r3, r4
 8003788:	f7fc fd38 	bl	80001fc <__aeabi_uldivmod>
 800378c:	4603      	mov	r3, r0
 800378e:	460c      	mov	r4, r1
 8003790:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003798:	d308      	bcc.n	80037ac <UART_SetConfig+0x3f0>
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a0:	d204      	bcs.n	80037ac <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	60da      	str	r2, [r3, #12]
 80037aa:	e0c1      	b.n	8003930 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	76bb      	strb	r3, [r7, #26]
 80037b0:	e0be      	b.n	8003930 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ba:	d164      	bne.n	8003886 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80037bc:	7efb      	ldrb	r3, [r7, #27]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d827      	bhi.n	8003812 <UART_SetConfig+0x456>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <UART_SetConfig+0x40c>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	080037ed 	.word	0x080037ed
 80037cc:	080037f5 	.word	0x080037f5
 80037d0:	080037fd 	.word	0x080037fd
 80037d4:	08003813 	.word	0x08003813
 80037d8:	08003803 	.word	0x08003803
 80037dc:	08003813 	.word	0x08003813
 80037e0:	08003813 	.word	0x08003813
 80037e4:	08003813 	.word	0x08003813
 80037e8:	0800380b 	.word	0x0800380b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ec:	f7fe fc6a 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
 80037f0:	6178      	str	r0, [r7, #20]
        break;
 80037f2:	e013      	b.n	800381c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f4:	f7fe fc7c 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 80037f8:	6178      	str	r0, [r7, #20]
        break;
 80037fa:	e00f      	b.n	800381c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037fc:	4b57      	ldr	r3, [pc, #348]	; (800395c <UART_SetConfig+0x5a0>)
 80037fe:	617b      	str	r3, [r7, #20]
        break;
 8003800:	e00c      	b.n	800381c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003802:	f7fe fbc9 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8003806:	6178      	str	r0, [r7, #20]
        break;
 8003808:	e008      	b.n	800381c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800380a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800380e:	617b      	str	r3, [r7, #20]
        break;
 8003810:	e004      	b.n	800381c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	76bb      	strb	r3, [r7, #26]
        break;
 800381a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8086 	beq.w	8003930 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	4a4b      	ldr	r2, [pc, #300]	; (8003958 <UART_SetConfig+0x59c>)
 800382a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800382e:	461a      	mov	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fbb3 f3f2 	udiv	r3, r3, r2
 8003836:	005a      	lsls	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	441a      	add	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	b29b      	uxth	r3, r3
 800384a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b0f      	cmp	r3, #15
 8003850:	d916      	bls.n	8003880 <UART_SetConfig+0x4c4>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d212      	bcs.n	8003880 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f023 030f 	bic.w	r3, r3, #15
 8003862:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	b29b      	uxth	r3, r3
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	b29a      	uxth	r2, r3
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	4313      	orrs	r3, r2
 8003874:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	89fa      	ldrh	r2, [r7, #14]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	e057      	b.n	8003930 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	76bb      	strb	r3, [r7, #26]
 8003884:	e054      	b.n	8003930 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003886:	7efb      	ldrb	r3, [r7, #27]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d828      	bhi.n	80038de <UART_SetConfig+0x522>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0x4d8>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	080038df 	.word	0x080038df
 80038a4:	080038cf 	.word	0x080038cf
 80038a8:	080038df 	.word	0x080038df
 80038ac:	080038df 	.word	0x080038df
 80038b0:	080038df 	.word	0x080038df
 80038b4:	080038d7 	.word	0x080038d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b8:	f7fe fc04 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
 80038bc:	6178      	str	r0, [r7, #20]
        break;
 80038be:	e013      	b.n	80038e8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c0:	f7fe fc16 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 80038c4:	6178      	str	r0, [r7, #20]
        break;
 80038c6:	e00f      	b.n	80038e8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c8:	4b24      	ldr	r3, [pc, #144]	; (800395c <UART_SetConfig+0x5a0>)
 80038ca:	617b      	str	r3, [r7, #20]
        break;
 80038cc:	e00c      	b.n	80038e8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ce:	f7fe fb63 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 80038d2:	6178      	str	r0, [r7, #20]
        break;
 80038d4:	e008      	b.n	80038e8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038da:	617b      	str	r3, [r7, #20]
        break;
 80038dc:	e004      	b.n	80038e8 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	76bb      	strb	r3, [r7, #26]
        break;
 80038e6:	bf00      	nop
    }

    if (pclk != 0U)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d020      	beq.n	8003930 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	4a19      	ldr	r2, [pc, #100]	; (8003958 <UART_SetConfig+0x59c>)
 80038f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038f8:	461a      	mov	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	441a      	add	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	b29b      	uxth	r3, r3
 8003912:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b0f      	cmp	r3, #15
 8003918:	d908      	bls.n	800392c <UART_SetConfig+0x570>
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d204      	bcs.n	800392c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	e001      	b.n	8003930 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800394c:	7ebb      	ldrb	r3, [r7, #26]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003958:	08003f38 	.word	0x08003f38
 800395c:	00f42400 	.word	0x00f42400

08003960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01a      	beq.n	8003a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5e:	d10a      	bne.n	8003a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]
  }
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ab4:	f7fd f97a 	bl	8000dac <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d10e      	bne.n	8003ae6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f82c 	bl	8003b34 <UART_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e022      	b.n	8003b2c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d10e      	bne.n	8003b12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f816 	bl	8003b34 <UART_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e00c      	b.n	8003b2c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b44:	e062      	b.n	8003c0c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d05e      	beq.n	8003c0c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4e:	f7fd f92d 	bl	8000dac <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d302      	bcc.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11d      	bne.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b72:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e045      	b.n	8003c2c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d02e      	beq.n	8003c0c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bbc:	d126      	bne.n	8003c0c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bd6:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e00f      	b.n	8003c2c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4013      	ands	r3, r2
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d08d      	beq.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_UARTEx_DisableFifoMode+0x16>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e027      	b.n	8003c9a <HAL_UARTEx_DisableFifoMode+0x66>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2224      	movs	r2, #36	; 0x24
 8003c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003c78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e02d      	b.n	8003d1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2224      	movs	r2, #36	; 0x24
 8003cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0201 	bic.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f850 	bl	8003da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e02d      	b.n	8003d96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2224      	movs	r2, #36	; 0x24
 8003d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f812 	bl	8003da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b089      	sub	sp, #36	; 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003da8:	4a2f      	ldr	r2, [pc, #188]	; (8003e68 <UARTEx_SetNbDataToProcess+0xc8>)
 8003daa:	f107 0314 	add.w	r3, r7, #20
 8003dae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003db2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003db6:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <UARTEx_SetNbDataToProcess+0xcc>)
 8003db8:	f107 030c 	add.w	r3, r7, #12
 8003dbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dc0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d108      	bne.n	8003dde <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ddc:	e03d      	b.n	8003e5a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dde:	2308      	movs	r3, #8
 8003de0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003de2:	2308      	movs	r3, #8
 8003de4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	0e5b      	lsrs	r3, r3, #25
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	0f5b      	lsrs	r3, r3, #29
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003e06:	7fbb      	ldrb	r3, [r7, #30]
 8003e08:	7f3a      	ldrb	r2, [r7, #28]
 8003e0a:	f107 0120 	add.w	r1, r7, #32
 8003e0e:	440a      	add	r2, r1
 8003e10:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003e14:	fb02 f303 	mul.w	r3, r2, r3
 8003e18:	7f3a      	ldrb	r2, [r7, #28]
 8003e1a:	f107 0120 	add.w	r1, r7, #32
 8003e1e:	440a      	add	r2, r1
 8003e20:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003e24:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003e30:	7ffb      	ldrb	r3, [r7, #31]
 8003e32:	7f7a      	ldrb	r2, [r7, #29]
 8003e34:	f107 0120 	add.w	r1, r7, #32
 8003e38:	440a      	add	r2, r1
 8003e3a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	7f7a      	ldrb	r2, [r7, #29]
 8003e44:	f107 0120 	add.w	r1, r7, #32
 8003e48:	440a      	add	r2, r1
 8003e4a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003e4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003e5a:	bf00      	nop
 8003e5c:	3724      	adds	r7, #36	; 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	08003ee0 	.word	0x08003ee0
 8003e6c:	08003ee8 	.word	0x08003ee8

08003e70 <__libc_init_array>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	4e0d      	ldr	r6, [pc, #52]	; (8003ea8 <__libc_init_array+0x38>)
 8003e74:	4c0d      	ldr	r4, [pc, #52]	; (8003eac <__libc_init_array+0x3c>)
 8003e76:	1ba4      	subs	r4, r4, r6
 8003e78:	10a4      	asrs	r4, r4, #2
 8003e7a:	2500      	movs	r5, #0
 8003e7c:	42a5      	cmp	r5, r4
 8003e7e:	d109      	bne.n	8003e94 <__libc_init_array+0x24>
 8003e80:	4e0b      	ldr	r6, [pc, #44]	; (8003eb0 <__libc_init_array+0x40>)
 8003e82:	4c0c      	ldr	r4, [pc, #48]	; (8003eb4 <__libc_init_array+0x44>)
 8003e84:	f000 f820 	bl	8003ec8 <_init>
 8003e88:	1ba4      	subs	r4, r4, r6
 8003e8a:	10a4      	asrs	r4, r4, #2
 8003e8c:	2500      	movs	r5, #0
 8003e8e:	42a5      	cmp	r5, r4
 8003e90:	d105      	bne.n	8003e9e <__libc_init_array+0x2e>
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
 8003e94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e98:	4798      	blx	r3
 8003e9a:	3501      	adds	r5, #1
 8003e9c:	e7ee      	b.n	8003e7c <__libc_init_array+0xc>
 8003e9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ea2:	4798      	blx	r3
 8003ea4:	3501      	adds	r5, #1
 8003ea6:	e7f2      	b.n	8003e8e <__libc_init_array+0x1e>
 8003ea8:	08003f58 	.word	0x08003f58
 8003eac:	08003f58 	.word	0x08003f58
 8003eb0:	08003f58 	.word	0x08003f58
 8003eb4:	08003f5c 	.word	0x08003f5c

08003eb8 <memset>:
 8003eb8:	4402      	add	r2, r0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d100      	bne.n	8003ec2 <memset+0xa>
 8003ec0:	4770      	bx	lr
 8003ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec6:	e7f9      	b.n	8003ebc <memset+0x4>

08003ec8 <_init>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr

08003ed4 <_fini>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	bf00      	nop
 8003ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eda:	bc08      	pop	{r3}
 8003edc:	469e      	mov	lr, r3
 8003ede:	4770      	bx	lr
